{"version":3,"sources":["syncweb.js","index.js","ArrayHandlers.js","EventEmitter.js","Protocol.js","Player.js","PlayerProxy.js","Client.js","WebSocketProtocol.js","export.js"],"names":["SyncWeb","get","remove","index","callback","totalList","ArrayHandlers","fetchedProtocol","staticProtocolList","staticPlayerProxyList","command","data","window"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACAA;ACFA;AACAC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC;AACA;AACA;AACAC;AACA;AACA;AACA;AACAA;AACA;AACA;AACA;AAzBA;AFuCA;AEXAH;AFaA;AACA;AGzCA;AAAA;AH4CA;AG3CA;AACA;AACA;AH6CA;AACA;AACA;AACA;AG7CA;AACA;AACA;AACA;AACA;AH+CA;AACA;AACA;AG/CA;AHiDA;AGhDA;AACAI;AACA;AACA;AACA;AACA;AHkDA;AACA;AACA;AGjDA;AACA;AHmDA;AACA;AACA;AGlDA;AHoDA;AGlDA;AACA;AACAC;AACA;AACAA;AACA;AACAA;AACA;AACA;AACA;AHoDA;AGlDA;AACAA;AACA;AHoDA;AGlDA;AACA;AHoDA;AACA;AACA;AGnDA;AACA;AHqDA;AGnDA;AACA;AACA;AHqDA;AACA;AACA;AACA;AACA;AGtDAL;ACvDA;AJgHA;AACA;AACA;AACA;AIhHA;AAAA;AJmHA;AInHA;AJqHA;AInHA;AAFA;AAGA;AJsHA;AACA;AACA;AACA;AItHAA;AJwHA;AACA;AKjIA;ALmIA;AKlIA;AACA;ALoIA;AKjIAA;ALmIA;AACA;AMzIA;AN2IA;AM1IA;AACA;AN4IA;AMzIAA;ACNA;APkJA;AOhJA;AACA;APkJA;AACA;AACA;AACA;AOlJA;AAAA;APqJA;AOrJA;APuJA;AOrJA;AACA;AACA;AACA;AALA;AAMA;APwJA;AACA;AACA;AACA;AOxJA;AACA;AP0JA;AACA;AACA;AOzJA;AACA;AP2JA;AACA;AACA;AO1JAM;AACA;AP4JA;AACA;AACA;AO/IA;AACA;APiJA;AACA;AACA;AOhJA;AACA;APkJA;AACA;AACA;AOjJAA;AACA;APmJA;AACA;AACA;AOlJA;AACA;APoJA;AACA;AACA;AOnJA;AACA;APqJA;AACA;AACA;AOpJAA;AACA;APsJA;AACA;AACA;AO1IA;AP4IA;AO3IA;AACA;AACA;AACA;AP6IA;AO3IA;AACA;AACA;AACA;AP6IA;AO3IA;AACA;AP6IA;AO3IA;AACAC;AACAA;AP6IA;AO3IA;AP6IA;AO3IAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AP6IA;AACA;AACA;AO5IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AP8IA;AACA;AACA;AO7IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AP+IA;AACA;AACA;AO9IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;APgJA;AACA;AACA;AO/IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;APiJA;AO/IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;APiJA;AACA;AACA;AOxRAC;AACA;AP0RA;AACA;AACA;AOzRA;AACA;AP2RA;AACA;AACA;AO1RAF;AACA;AP4RA;AACA;AACA;AOnQAG;AACA;APqQA;AACA;AACA;AOpQA;AACA;APsQA;AACA;AACA;AOrQAH;AACA;APuQA;AACA;AACA;AACA;AACA;AO/KAN;APiLA;AACA;AACA;AACA;AQvVA;AAAA;AR0VA;AQ1VA;AAEA;AR2VA;AACA;AACA;AACA;AQ5VA;AR8VA;AQ7VA;AR+VA;AQ7VA;AACAI;AACA;AR+VA;AQ7VA;AACA;AACA;AACA;AR+VA;AACA;AACA;AQ9VAM;AACAC;AACA;ARgWA;AACA;AACA;AACA;AACA;AQjWA;ARmWA;AACA;AQnWAX;ACxBAY","file":"syncweb.js","sourcesContent":[null,"/* eslint-disable no-unused-vars */\r\nlet SyncWeb = {};\r\nSyncWeb.util = {};","let ArrayHandlers = {\r\n\tget(array, content) {\r\n\t\tif (typeof content == \"string\") {\r\n\t\t\treturn array.find((itemFound) => {\r\n\t\t\t\treturn itemFound.name == content;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (array.includes(content)) {\r\n\t\t\t\treturn content;\r\n\t\t\t} else {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tremove(array, content) {\r\n\t\tlet index;\r\n\t\tif (typeof content == \"string\") {\r\n\t\t\tindex = array.findIndex((itemFound) => {\r\n\t\t\t\treturn itemFound.name == content;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tindex = array.indexOf(content);\r\n\t\t}\r\n\t\tif (index > -1) array.splice(index, 1);\r\n\t}\r\n};\r\n\r\nSyncWeb.util.ArrayHandlers = ArrayHandlers;","class EventEmitter {\r\n\tconstructor() {\r\n\t\tthis.eventList = {};\r\n\t\tthis.activeEvents = true;\r\n\t}\r\n\r\n\ton(name, callback) {\r\n\t\tif (this.eventList[name] == null) {\r\n\t\t\tthis.eventList[name] = [];\r\n\t\t}\r\n\t\tthis.eventList[name].push(callback);\r\n\t}\r\n\r\n\tonce(name, callback) {\r\n\t\tlet modifiedCallback = (data) => {\r\n\t\t\tcallback(data);\r\n\t\t\tthis.removeListener(name, modifiedCallback);\r\n\t\t};\r\n\t\tthis.on(name, modifiedCallback);\r\n\t}\r\n\r\n\tany(callback) {\r\n\t\tthis.on(\"*\", callback);\r\n\t}\r\n\r\n\temit(name, data) {\r\n\t\tif (!this.activeEvents) return 0;\r\n\r\n\t\tlet totalList;\r\n\t\tif (this.eventList[name] && this.eventList[\"*\"]) {\r\n\t\t\ttotalList = this.eventList[name].concat(this.eventList[\"*\"]);\r\n\t\t} else if (this.eventList[name]) {\r\n\t\t\ttotalList = this.eventList[name];\r\n\t\t} else if (this.eventList[\"*\"]) {\r\n\t\t\ttotalList = this.eventList[\"*\"]\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < totalList.length; i++) {\r\n\t\t\ttotalList[i](data);\r\n\t\t}\r\n\r\n\t\treturn totalList.length;\r\n\t}\r\n\r\n\tremoveListener(name, callback) {\r\n\t\t// TODO: find a way to gracefully report problems like this\r\n\t\tif (!this.eventList[name]) return;\r\n\r\n\t\tlet index = this.eventList[name].indexOf(callback);\r\n\t\tif (index > -1) this.eventList.splice(index, 1);\r\n\t}\r\n}\r\n\r\nSyncWeb.util.EventEmitter = EventEmitter;","/* global EventEmitter */\r\n\r\nclass Protocol extends EventEmitter {\r\n\tconstructor(name) {\r\n\t\tsuper();\r\n\t\tthis.name = name;\r\n\t}\r\n}\r\n\r\nSyncWeb.Protocol = Protocol;","class Player {\r\n\tconstructor(name) {\r\n\t\tthis.name = name;\r\n\t}\r\n}\r\n\r\nSyncWeb.Player = Player;","class PlayerProxy {\r\n\tconstructor(name) {\r\n\t\tthis.name = name;\r\n\t}\r\n}\r\n\r\nSyncWeb.PlayerProxy = PlayerProxy;","/* global EventEmitter, ArrayHandlers */\r\n\r\nlet staticProtocolList = [];\r\nlet staticPlayerProxyList = [];\r\n\r\nclass Client extends EventEmitter {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.protocolList = staticProtocolList;\r\n\t\tthis.playerList = [];\r\n\t\tthis.playerProxyList = staticPlayerProxyList;\r\n\t\tthis.state = 0;\r\n\t}\r\n\r\n\taddProtocol(protocol) {\r\n\t\tthis.protocolList.push(protocol);\r\n\t}\r\n\r\n\tgetProtocol(protocol) {\r\n\t\treturn ArrayHandlers.get(this.protocolList, protocol);\r\n\t}\r\n\r\n\tremoveProtocol(protocol) {\r\n\t\tArrayHandlers.remove(this.protocolList, protocol);\r\n\t}\r\n\r\n\tstatic addStaticProtocol(protocol) {\r\n\t\tstaticProtocolList.push(protocol);\r\n\t}\r\n\r\n\tstatic getStaticProtocol(protocol) {\r\n\t\treturn ArrayHandlers.get(staticProtocolList, protocol);\r\n\t}\r\n\r\n\tstatic removeStaticProtocol(protocol) {\r\n\t\tArrayHandlers.remove(staticProtocolList, protocol);\r\n\t}\r\n\r\n\taddPlayer(player) {\r\n\t\tthis.playerList.push(player);\r\n\t}\r\n\r\n\tgetPlayer(player) {\r\n\t\treturn ArrayHandlers.get(this.playerList, player);\r\n\t}\r\n\r\n\tremovePlayer(player) {\r\n\t\tArrayHandlers.remove(this.playerList, player);\r\n\t}\r\n\r\n\taddPlayerProxy(playerProxy) {\r\n\t\tthis.playerProxyList.push(playerProxy);\r\n\t}\r\n\r\n\tgetPlayerProxy(playerProxy) {\r\n\t\treturn ArrayHandlers.get(this.playerProxyList, playerProxy);\r\n\t}\r\n\r\n\tremovePlayerProxy(playerProxy) {\r\n\t\tArrayHandlers.remove(this.playerProxyList, playerProxy);\r\n\t}\r\n\r\n\tstatic addStaticPlayerProxy(playerProxy) {\r\n\t\tstaticPlayerProxyList.push(playerProxy);\r\n\t}\r\n\r\n\tstatic getStaticPlayerProxy(playerProxy) {\r\n\t\treturn ArrayHandlers.get(staticPlayerProxyList, playerProxy);\r\n\t}\r\n\r\n\tstatic removeStaticPlayerProxy(playerProxy) {\r\n\t\tArrayHandlers.remove(staticPlayerProxyList, playerProxy);\r\n\t}\r\n\r\n\tconnect(protocol, options) {\r\n\t\tif (this.state != 0) {\r\n\t\t\t// TODO: general error handler instead of throwing errors?\r\n\t\t\tthrow new Error(\"Client is currently connected, must disconnect first before reconnecting.\");\r\n\t\t}\r\n\r\n\t\tlet fetchedProtocol = this.getProtocol(protocol);\r\n\t\tif (fetchedProtocol == undefined || !fetchedProtocol) {\r\n\t\t\tthrow new Error(\"No protocol of that name is loaded!\");\r\n\t\t}\r\n\r\n\t\tthis.currentProtocol = fetchedProtocol;\r\n\t\tthis.state = 1;\r\n\r\n\t\tthis.proxyEvents(\"connecting\", protocol);\r\n\t\tfetchedProtocol.any(this.proxyEvents);\r\n\t\tfetchedProtocol.on(\"seturl\", this.setURL);\r\n\r\n\t\t// TODO: implement some sort of log system, for errors, connection progress etc.\r\n\r\n\t\tfetchedProtocol.connect(options, () => {\r\n\t\t\tif (this.state != 1) {\r\n\t\t\t\treturn; // ignore event if not in connecting state\r\n\t\t\t}\r\n\t\t\tthis.state = 2;\r\n\t\t\tthis.proxyEvents(\"connected\");\r\n\t\t});\r\n\t}\r\n\r\n\tproxyEvents(event, data) {\r\n\t\tfor (let i = 0; i < this.playerProxyList.length; i++) {\r\n\t\t\tthis.playerProxyList[i].on(event, data);\r\n\t\t}\r\n\t\tif (this.currentPlayer) {\r\n\t\t\t// players must not respond to seturl\r\n\t\t\tthis.currentPlayer.on(event, data);\r\n\t\t}\r\n\t}\r\n\r\n\tproxyCommand(command, data) {\r\n\t\tif (this.currentPlayer) {\r\n\t\t\tfor (let i = 0; i < this.playerProxyList.length; i++) {\r\n\t\t\t\tthis.playerProxyList[i].command(command, data);\r\n\t\t\t}\r\n\t\t\tthis.currentPlayer.command(command, data);\r\n\t\t} else {\r\n\t\t\t// TODO: maybe error if problematic?\r\n\t\t}\r\n\t}\r\n\r\n\tproxyCommandToProtocol(command, data) {\r\n\t\t// TODO: Should players emit (and have proxied) events?\r\n\t\tif (this.currentPlayer) {\r\n\t\t\tfor (let i = 0; i < this.playerProxyList.length; i++) {\r\n\t\t\t\tthis.playerProxyList[i].command(command, data);\r\n\t\t\t}\r\n\t\t\tthis.currentProtocol.command(command, data);\r\n\t\t} else {\r\n\t\t\t// TODO: maybe error if problematic?\r\n\t\t}\r\n\t}\r\n\r\n\tsetURL(url) {\r\n\t\tif (this.currentPlayer) {\r\n\t\t\t// TODO: what happens when a http player\r\n\t\t\t//       and yt player coexist? how do\r\n\t\t\t//       we choose which to use?\r\n\t\t\tif (this.currentPlayer.supports(url)) {\r\n\t\t\t\tthis.proxyCommand(\"seturl\", url);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet foundPlayer = this.playerList.find((player) => {\r\n\t\t\treturn player.supports(url);\r\n\t\t});\r\n\t\tif (foundPlayer) {\r\n\t\t\t// if player is found, switch to it\r\n\t\t\tthis.currentPlayer.command(\"terminate\");\r\n\t\t\tthis.currentPlayer = foundPlayer;\r\n\t\t\tthis.proxyCommand(\"seturl\", url);\r\n\t\t} else {\r\n\t\t\t// TODO: handle no players to play url\r\n\t\t\t//       catch-all player?\r\n\t\t\tthrow new Error(\"No players to handle URL available\");\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n\r\nSyncWeb.Client = Client;","class WebSocketProtocol extends SyncWeb.Protocol {\r\n\tconstructor() {\r\n\t\tsuper(\"WebSocket-builtin\");\r\n\t}\r\n\r\n\tconnect(options, callback) {\r\n\t\tthis.socket = new WebSocket(options.url);\r\n\r\n\t\tthis.socket.addEventListener(\"open\", () => {\r\n\t\t\tcallback();\r\n\t\t});\r\n\r\n\t\tthis.socket.addEventListener(\"message\", (data) => {\r\n\t\t\tthis.emit(\"message\", data);\r\n\t\t});\r\n\t}\r\n\r\n\tcommand(command, data) {\r\n\t\tcommand;\r\n\t\tdata;\r\n\t}\r\n}\r\n\r\n// Adds the protocol to SyncWeb statically, so every Client has it\r\nSyncWeb.Client.addStaticProtocol(new WebSocketProtocol());","window.SyncWeb = SyncWeb;"]}