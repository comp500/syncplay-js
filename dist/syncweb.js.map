{"version":3,"sources":["syncweb.js","index.js","ArrayHandlers.js","EventEmitter.js","Protocol.js","Player.js","PlayerProxy.js","Client.js","WebSocketProtocol.js","export.js"],"names":["SyncWeb","get","remove","index","callback","totalList","player","ArrayHandlers","fetchedProtocol","staticProtocolList","staticPlayerList","staticPlayerProxyList","e","console","version","realversion","features","motd","connectedString","setBy","paused","position","doSeek","output","username","name","packet","isReady","manuallyInitiated","file","window"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACAA;ACFA;AACAC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC;AACA;AACA;AACAC;AACA;AACA;AACA;AACAA;AACA;AACA;AACA;AAzBA;AFuCA;AEXAH;AFaA;AACA;AGzCA;AAAA;AH4CA;AG3CA;AACA;AACA;AH6CA;AACA;AACA;AACA;AG7CA;AACA;AACA;AACA;AACA;AH+CA;AACA;AACA;AG/CA;AHiDA;AGhDA;AACAI;AACA;AACA;AACA;AACA;AHkDA;AACA;AACA;AGjDA;AACA;AHmDA;AACA;AACA;AGlDA;AHoDA;AGlDA;AACA;AACAC;AACA;AACAA;AACA;AACAA;AACA;AACA;AACA;AHoDA;AGlDA;AACAA;AACA;AHoDA;AGlDA;AACA;AHoDA;AACA;AACA;AGnDA;AACA;AHqDA;AGnDA;AACA;AACA;AHqDA;AACA;AACA;AACA;AACA;AGtDAL;ACvDA;AJgHA;AACA;AACA;AACA;AIhHA;AAAA;AJmHA;AInHA;AJqHA;AInHA;AAFA;AAGA;AJsHA;AACA;AACA;AACA;AItHAA;AJwHA;AACA;AKjIA;ALmIA;AKlIA;AACA;ALoIA;AKjIAA;ALmIA;AACA;AMzIA;AN2IA;AM1IA;AACA;AN4IA;AMzIAA;ACNA;APkJA;AOhJA;AACA;AACA;APkJA;AACA;AACA;AACA;AOlJA;AAAA;APqJA;AOrJA;APuJA;AOrJA;AACA;AACA;AACA;AACA;APuJA;AOrJA;AACAM;AACA;AAVA;AAWA;APwJA;AACA;AACA;AACA;AOxJA;AACA;AP0JA;AACA;AACA;AOzJA;AACA;AP2JA;AACA;AACA;AO1JAC;AACA;AP4JA;AACA;AACA;AO/IA;AACA;APiJA;AACA;AACA;AOhJA;AACA;APkJA;AACA;AACA;AOjJAA;AACA;APmJA;AACA;AACA;AOtIA;AACA;APwIA;AACA;AACA;AOvIA;AACA;APyIA;AACA;AACA;AOxIAA;AACA;AP0IA;AACA;AACA;AO9HA;APgIA;AO/HA;AACA;AACA;AACA;APiIA;AO/HA;AACA;AACA;AACA;APiIA;AO/HA;AACA;APiIA;AO/HA;AACAC;AACAA;APiIA;AO/HA;APiIA;AO/HAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;APiIA;AO/HA;APiIA;AACA;AACA;AACA;AOlIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;APoIA;AOlIA;APoIA;AACA;AACA;AACA;AOrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;APuIA;AACA;AACA;AOtIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;APwIA;AACA;AACA;AOvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;APyIA;AOvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;APyIA;AACA;AACA;AO9RAC;AACA;APgSA;AACA;AACA;AO/RA;AACA;APiSA;AACA;AACA;AOhSAF;AACA;APkSA;AACA;AACA;AOrRAG;AACA;APuRA;AACA;AACA;AOtRA;AACA;APwRA;AACA;AACA;AOvRAH;AACA;APyRA;AACA;AACA;AO5QAI;AACA;AP8QA;AACA;AACA;AO7QA;AACA;AP+QA;AACA;AACA;AO9QAJ;AACA;APgRA;AACA;AACA;AACA;AACA;AOtLAP;APwLA;AACA;AACA;AACA;AQlXA;AAAA;ARqXA;AQrXA;ARuXA;AQpXA;AACA;AACA;AALA;AAMA;ARuXA;AACA;AACA;AACA;AQxXA;AR0XA;AQzXA;AR2XA;AQzXA;AACAI;AACA;AACA;AR2XA;AQzXA;AACA;AACAQ;AACA;AACA;AACA;AACA;AACA;AACA;AR2XA;AACA;AACA;AQ1XA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AR4XA;AACA;AACA;AQ3XA;AACAC;AR6XA;AQ3XA;AACAA;AACA;AACA;AR6XA;AQ3XA;AACAA;AACA;AACA;AACAC;AACAC;AACAC;AACAC;AAJA;AAMA;AACA;AACAC;AAEA;AACA;AACA;AACA;AR4XA;AQ1XA;AACAL;AACA;AACA;AR4XA;AQ1XA;AACAA;AACAA;AACAA;AACA;AR4XA;AQ1XA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA;AACAM;AACAC;AACAC;AACAC;AAJA;ARiYA;AQ1XA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AR4XA;AACA;AACA;AQ3XA;AACA;AACAC;AR6XA;AQ3XA;AACAA;AACAA;AACAA;AACA;AACAA;AACA;AACA;AACA;AR6XA;AQ3XAA;AACAA;AACAA;AACAA;AR6XA;AQ3XA;AACA;AACA;AR6XA;AQ3XA;AACAA;AACA;AACAA;AACA;AACA;AACA;AACAA;AACA;AACA;AR6XA;AQ3XAV;AR6XA;AQ3XA;AACA;AR6XA;AACA;AACA;AQ5XA;AACA;AR8XA;AQ5XA;AACA;AACAW;AACA;AACAC;AADA;AAGA;AALA;AADA;ARsYA;AQ5XA;AACAC;AACA;AR8XA;AQ5XA;AACA;AR8XA;AACA;AACA;AQ7XA;AACA;AR+XA;AACA;AACA;AQ9XA;AACA;AACA;AACAC;AACAC;AACAJ;AAHA;AADA;AADA;AASA;AACA;ARgYA;AACA;AACA;AQ/XA;AACA;AACA;AACA;AACAK;AADA;AADA;AAKA;ARiYA;AACA;AACA;AACA;AACA;AQlYA;ARoYA;AACA;AQpYA7B;AC3NA8B","file":"syncweb.js","sourcesContent":[null,"/* eslint-disable no-unused-vars */\r\nlet SyncWeb = {};\r\nSyncWeb.util = {};","let ArrayHandlers = {\r\n\tget(array, content) {\r\n\t\tif (typeof content == \"string\") {\r\n\t\t\treturn array.find((itemFound) => {\r\n\t\t\t\treturn itemFound.name == content;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (array.includes(content)) {\r\n\t\t\t\treturn content;\r\n\t\t\t} else {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tremove(array, content) {\r\n\t\tlet index;\r\n\t\tif (typeof content == \"string\") {\r\n\t\t\tindex = array.findIndex((itemFound) => {\r\n\t\t\t\treturn itemFound.name == content;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tindex = array.indexOf(content);\r\n\t\t}\r\n\t\tif (index > -1) array.splice(index, 1);\r\n\t}\r\n};\r\n\r\nSyncWeb.util.ArrayHandlers = ArrayHandlers;","class EventEmitter {\r\n\tconstructor() {\r\n\t\tthis.eventList = {};\r\n\t\tthis.activeEvents = true;\r\n\t}\r\n\r\n\ton(name, callback) {\r\n\t\tif (this.eventList[name] == null) {\r\n\t\t\tthis.eventList[name] = [];\r\n\t\t}\r\n\t\tthis.eventList[name].push(callback);\r\n\t}\r\n\r\n\tonce(name, callback) {\r\n\t\tlet modifiedCallback = (data) => {\r\n\t\t\tcallback(data);\r\n\t\t\tthis.removeListener(name, modifiedCallback);\r\n\t\t};\r\n\t\tthis.on(name, modifiedCallback);\r\n\t}\r\n\r\n\tany(callback) {\r\n\t\tthis.on(\"*\", callback);\r\n\t}\r\n\r\n\temit(name, data) {\r\n\t\tif (!this.activeEvents) return 0;\r\n\r\n\t\tlet totalList;\r\n\t\tif (this.eventList[name] && this.eventList[\"*\"]) {\r\n\t\t\ttotalList = this.eventList[name].concat(this.eventList[\"*\"]);\r\n\t\t} else if (this.eventList[name]) {\r\n\t\t\ttotalList = this.eventList[name];\r\n\t\t} else if (this.eventList[\"*\"]) {\r\n\t\t\ttotalList = this.eventList[\"*\"]\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < totalList.length; i++) {\r\n\t\t\ttotalList[i](data);\r\n\t\t}\r\n\r\n\t\treturn totalList.length;\r\n\t}\r\n\r\n\tremoveListener(name, callback) {\r\n\t\t// TODO: find a way to gracefully report problems like this\r\n\t\tif (!this.eventList[name]) return;\r\n\r\n\t\tlet index = this.eventList[name].indexOf(callback);\r\n\t\tif (index > -1) this.eventList.splice(index, 1);\r\n\t}\r\n}\r\n\r\nSyncWeb.util.EventEmitter = EventEmitter;","/* global EventEmitter */\r\n\r\nclass Protocol extends EventEmitter {\r\n\tconstructor(name) {\r\n\t\tsuper();\r\n\t\tthis.name = name;\r\n\t}\r\n}\r\n\r\nSyncWeb.Protocol = Protocol;","class Player {\r\n\tconstructor(name) {\r\n\t\tthis.name = name;\r\n\t}\r\n}\r\n\r\nSyncWeb.Player = Player;","class PlayerProxy {\r\n\tconstructor(name) {\r\n\t\tthis.name = name;\r\n\t}\r\n}\r\n\r\nSyncWeb.PlayerProxy = PlayerProxy;","/* global EventEmitter, ArrayHandlers */\r\n\r\nlet staticProtocolList = [];\r\nlet staticPlayerProxyList = [];\r\nlet staticPlayerList = [];\r\n\r\nclass Client extends EventEmitter {\r\n\tconstructor(playerElement) {\r\n\t\tsuper();\r\n\t\tthis.protocolList = staticProtocolList;\r\n\t\tthis.playerList = staticPlayerList;\r\n\t\tthis.playerProxyList = staticPlayerProxyList;\r\n\t\tthis.state = 0;\r\n\t\tthis.playerElement = playerElement;\r\n\r\n\t\tthis.playerList.forEach((player) => {\r\n\t\t\tplayer.initialise(this);\r\n\t\t});\r\n\t}\r\n\r\n\taddProtocol(protocol) {\r\n\t\tthis.protocolList.push(protocol);\r\n\t}\r\n\r\n\tgetProtocol(protocol) {\r\n\t\treturn ArrayHandlers.get(this.protocolList, protocol);\r\n\t}\r\n\r\n\tremoveProtocol(protocol) {\r\n\t\tArrayHandlers.remove(this.protocolList, protocol);\r\n\t}\r\n\r\n\tstatic addStaticProtocol(protocol) {\r\n\t\tstaticProtocolList.push(protocol);\r\n\t}\r\n\r\n\tstatic getStaticProtocol(protocol) {\r\n\t\treturn ArrayHandlers.get(staticProtocolList, protocol);\r\n\t}\r\n\r\n\tstatic removeStaticProtocol(protocol) {\r\n\t\tArrayHandlers.remove(staticProtocolList, protocol);\r\n\t}\r\n\r\n\taddPlayer(player) {\r\n\t\tthis.playerList.push(player);\r\n\t}\r\n\r\n\tgetPlayer(player) {\r\n\t\treturn ArrayHandlers.get(this.playerList, player);\r\n\t}\r\n\r\n\tremovePlayer(player) {\r\n\t\tArrayHandlers.remove(this.playerList, player);\r\n\t}\r\n\r\n\tstatic addStaticPlayer(player) {\r\n\t\tstaticPlayerList.push(player);\r\n\t}\r\n\r\n\tstatic getStaticPlayer(player) {\r\n\t\treturn ArrayHandlers.get(staticPlayerList, player);\r\n\t}\r\n\r\n\tstatic removeStaticPlayer(player) {\r\n\t\tArrayHandlers.remove(staticPlayerList, player);\r\n\t}\r\n\r\n\taddPlayerProxy(playerProxy) {\r\n\t\tthis.playerProxyList.push(playerProxy);\r\n\t}\r\n\r\n\tgetPlayerProxy(playerProxy) {\r\n\t\treturn ArrayHandlers.get(this.playerProxyList, playerProxy);\r\n\t}\r\n\r\n\tremovePlayerProxy(playerProxy) {\r\n\t\tArrayHandlers.remove(this.playerProxyList, playerProxy);\r\n\t}\r\n\r\n\tstatic addStaticPlayerProxy(playerProxy) {\r\n\t\tstaticPlayerProxyList.push(playerProxy);\r\n\t}\r\n\r\n\tstatic getStaticPlayerProxy(playerProxy) {\r\n\t\treturn ArrayHandlers.get(staticPlayerProxyList, playerProxy);\r\n\t}\r\n\r\n\tstatic removeStaticPlayerProxy(playerProxy) {\r\n\t\tArrayHandlers.remove(staticPlayerProxyList, playerProxy);\r\n\t}\r\n\r\n\tconnect(protocol, options) {\r\n\t\tif (this.state != 0) {\r\n\t\t\t// TODO: general error handler instead of throwing errors?\r\n\t\t\tthrow new Error(\"Client is currently connected, must disconnect first before reconnecting.\");\r\n\t\t}\r\n\r\n\t\tlet fetchedProtocol = this.getProtocol(protocol);\r\n\t\tif (fetchedProtocol == undefined || !fetchedProtocol) {\r\n\t\t\tthrow new Error(\"No protocol of that name is loaded!\");\r\n\t\t}\r\n\r\n\t\tthis.currentProtocol = fetchedProtocol;\r\n\t\tthis.state = 1;\r\n\r\n\t\tthis.proxyEvents(\"connecting\", protocol);\r\n\t\tfetchedProtocol.any(this.proxyEvents.bind(this));\r\n\t\tfetchedProtocol.on(\"seturl\", this.setURL.bind(this));\r\n\r\n\t\t// TODO: implement some sort of log system, for errors, connection progress etc.\r\n\r\n\t\tfetchedProtocol.connect(options, () => {\r\n\t\t\tif (this.state != 1) {\r\n\t\t\t\treturn; // ignore event if not in connecting state\r\n\t\t\t}\r\n\t\t\tthis.state = 2;\r\n\t\t\tthis.proxyEvents(\"connected\");\r\n\t\t});\r\n\t}\r\n\r\n\t// events relay status, such as \"connected\", \"connecting\" etc.\r\n\tproxyEvents(event, data) {\r\n\t\tfor (let i = 0; i < this.playerProxyList.length; i++) {\r\n\t\t\tthis.playerProxyList[i].on(event, data);\r\n\t\t}\r\n\t\tif (this.currentPlayer) {\r\n\t\t\t// players must not respond to seturl\r\n\t\t\tthis.currentPlayer.on(event, data);\r\n\t\t}\r\n\t}\r\n\r\n\t// commands relay information about change of state, e.g. protocol tells player to pause\r\n\tproxyCommand(command, data) {\r\n\t\tif (this.currentPlayer) {\r\n\t\t\tfor (let i = 0; i < this.playerProxyList.length; i++) {\r\n\t\t\t\tthis.playerProxyList[i].command(command, data);\r\n\t\t\t}\r\n\t\t\tthis.currentPlayer.command(command, data);\r\n\t\t} else {\r\n\t\t\t// TODO: maybe error if problematic?\r\n\t\t}\r\n\t}\r\n\r\n\tproxyCommandToProtocol(command, data) {\r\n\t\t// TODO: Should players emit (and have proxied) events?\r\n\t\tif (this.currentPlayer) {\r\n\t\t\tfor (let i = 0; i < this.playerProxyList.length; i++) {\r\n\t\t\t\tthis.playerProxyList[i].command(command, data);\r\n\t\t\t}\r\n\t\t\tthis.currentProtocol.command(command, data);\r\n\t\t} else {\r\n\t\t\t// TODO: maybe error if problematic?\r\n\t\t}\r\n\t}\r\n\r\n\tsetURL(url) {\r\n\t\tif (this.currentPlayer) {\r\n\t\t\t// TODO: what happens when a http player\r\n\t\t\t//       and yt player coexist? how do\r\n\t\t\t//       we choose which to use?\r\n\t\t\tif (this.currentPlayer.supports(url)) {\r\n\t\t\t\tthis.proxyCommand(\"seturl\", url);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet foundPlayer = this.playerList.find((player) => {\r\n\t\t\treturn player.supports(url);\r\n\t\t});\r\n\t\tif (foundPlayer) {\r\n\t\t\t// if player is found, switch to it\r\n\t\t\tif (this.currentPlayer) this.currentPlayer.command(\"terminate\");\r\n\t\t\tthis.currentPlayer = foundPlayer;\r\n\t\t\tthis.proxyCommand(\"seturl\", url);\r\n\t\t} else {\r\n\t\t\t// TODO: handle no players to play url\r\n\t\t\t//       catch-all player?\r\n\t\t\tthrow new Error(\"No players to handle URL available\");\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n\r\nSyncWeb.Client = Client;","class WebSocketProtocol extends SyncWeb.Protocol {\r\n\tconstructor() {\r\n\t\tsuper(\"WebSocket-builtin\");\r\n\r\n\t\tthis.currentPosition = 0.0;\r\n\t\tthis.paused = true;\r\n\t\tthis.doSeek = false;\r\n\t}\r\n\r\n\tconnect(options, callback) {\r\n\t\tthis.socket = new WebSocket(options.url);\r\n\r\n\t\tthis.socket.addEventListener(\"open\", () => {\r\n\t\t\tcallback();\r\n\t\t\tthis.sendHello(\"comp500\", \"test\");\r\n\t\t});\r\n\r\n\t\tthis.socket.addEventListener(\"message\", (e) => {\r\n\t\t\tthis.emit(\"message\", e.data);\r\n\t\t\te.data.split(\"\\n\").forEach(messageText => {\r\n\t\t\t\tif (messageText == null) return;\r\n\t\t\t\tif (messageText.length < 1) return;\r\n\t\t\t\tthis.parseMessage(messageText);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tcommand(command, data) {\r\n\t\tif (command == \"send\") {\r\n\t\t\tthis.socket.send(JSON.stringify(data));\r\n\t\t}\r\n\t\tif (command == \"setmeta\") {\r\n\t\t\tthis.sendFile(data.duration, data.name);\r\n\t\t}\r\n\t\tif (command == \"settime\") {\r\n\t\t\tthis.currentPosition = data;\r\n\t\t}\r\n\t\tif (command == \"seek\") {\r\n\t\t\tthis.currentPosition = data;\r\n\t\t\tthis.doSeek = true;\r\n\t\t}\r\n\t\tif (command == \"pause\") {\r\n\t\t\tthis.paused = true;\r\n\t\t}\r\n\t\tif (command == \"unpause\") {\r\n\t\t\tthis.paused = false;\r\n\t\t}\r\n\t}\r\n\r\n\tparseMessage(message) {\r\n\t\tlet parsed = JSON.parse(message);\r\n\t\tconsole.log(\"SERVER:\", parsed); // eslint-disable-line no-console\r\n\r\n\t\tif (parsed.Error) {\r\n\t\t\tconsole.log(\"err\", parsed.Error); // eslint-disable-line no-console\r\n\t\t\t// TODO disconnect\r\n\t\t}\r\n\r\n\t\tif (parsed.Hello) {\r\n\t\t\tconsole.log(\"hello\", parsed.Hello); // eslint-disable-line no-console\r\n\t\t\t// TODO handle failed logins, etc.\r\n\t\t\tthis.serverDetails = {\r\n\t\t\t\tversion: parsed.Hello.version,\r\n\t\t\t\trealversion: parsed.Hello.realversion,\r\n\t\t\t\tfeatures: parsed.Hello.features,\r\n\t\t\t\tmotd: parsed.Hello.motd\r\n\t\t\t};\r\n\t\t\tlet connectedString = `Connected to server, version ${parsed.Hello.version}.`;\r\n\t\t\tif (parsed.Hello.motd) {\r\n\t\t\t\tconnectedString += ` MOTD:\r\n\t\t\t\t${parsed.Hello.motd}`;\r\n\t\t\t}\r\n\t\t\tthis.emit(\"connected\", connectedString);\r\n\t\t\t// roomEventRequest?\r\n\t\t}\r\n\r\n\t\tif (parsed.Set) {\r\n\t\t\tconsole.log(\"set\", parsed.Set); // eslint-disable-line no-console\r\n\t\t\t// TODO users, playlists\r\n\t\t}\r\n\r\n\t\tif (parsed.List) {\r\n\t\t\tconsole.log(\"list\", parsed.List); // eslint-disable-line no-console\r\n\t\t\tconsole.log(\"roomsList\", Object.keys(parsed.List)); // eslint-disable-line no-console\r\n\t\t\tconsole.log(\"userList\", Object.keys(parsed.List[this.currentRoom])); // eslint-disable-line no-console\r\n\t\t}\r\n\r\n\t\tif (parsed.State) {\r\n\t\t\tconsole.log(\"state\", parsed.State); // eslint-disable-line no-console\r\n\t\t\tif (parsed.State.ping.yourLatency != null) {\r\n\t\t\t\tthis.clientRtt = parsed.State.ping.yourLatency;\r\n\t\t\t}\r\n\t\t\tthis.latencyCalculation = parsed.State.ping.latencyCalculation;\r\n\t\t\tif (parsed.State.ignoringOnTheFly && parsed.State.ignoringOnTheFly.server) {\r\n\t\t\t\tthis.serverIgnoringOnTheFly = parsed.State.ignoringOnTheFly.server;\r\n\t\t\t\tthis.clientIgnoringOnTheFly = 0;\r\n\t\t\t\tthis.stateChanged = false;\r\n\t\t\t}\r\n\t\t\tif (parsed.State.playstate) {\r\n\t\t\t\tif (parsed.State.playstate.setBy && parsed.State.playstate.setBy != this.currentUsername) {\r\n\t\t\t\t\tlet doSeek = parsed.State.playstate.doSeek;\r\n\t\t\t\t\t// falsy -> false, because null/undefined\r\n\t\t\t\t\tif (!doSeek) doSeek = false;\r\n\t\t\t\t\tconsole.log({ // eslint-disable-line no-console\r\n\t\t\t\t\t\tsetBy: parsed.State.playstate.setBy,\r\n\t\t\t\t\t\tpaused: parsed.State.playstate.paused,\r\n\t\t\t\t\t\tposition: parsed.State.playstate.position,\r\n\t\t\t\t\t\tdoSeek\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tthis.currentPosition = parsed.State.playstate.position;\r\n\t\t\t\t\tif (doSeek) {\r\n\t\t\t\t\t\tthis.emit(\"seek\", parsed.State.playstate.position);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.paused != parsed.State.playstate.paused) {\r\n\t\t\t\t\t\tif (parsed.State.playstate.paused) {\r\n\t\t\t\t\t\t\tthis.emit(\"pause\");\r\n\t\t\t\t\t\t\tthis.paused = true;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.emit(\"unpause\");\r\n\t\t\t\t\t\t\tthis.paused = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.sendState();\r\n\t}\r\n\r\n\tsendState() {\r\n\t\tlet clientIgnoreIsNotSet = (this.clientIgnoringOnTheFly == 0 || this.serverIgnoringOnTheFly != 0);\r\n\t\tlet output = {};\r\n\t\toutput.State = {};\r\n\r\n\t\tif (clientIgnoreIsNotSet) {\r\n\t\t\toutput.State.playstate = {};\r\n\t\t\toutput.State.playstate.position = this.currentPosition;\r\n\t\t\toutput.State.playstate.paused = this.paused;\r\n\t\t\tif (this.doSeek) {\r\n\t\t\t\toutput.State.playstate.doSeek = true;\r\n\t\t\t\tthis.doSeek = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\toutput.State.ping = {};\r\n\t\toutput.State.ping.latencyCalculation = this.latencyCalculation;\r\n\t\toutput.State.ping.clientLatencyCalculation = Date.now() / 1000;\r\n\t\toutput.State.ping.clientRtt = this.clientRtt;\r\n\r\n\t\tif (this.stateChanged) {\r\n\t\t\tthis.clientIgnoringOnTheFly += 1;\r\n\t\t}\r\n\r\n\t\tif (this.serverIgnoringOnTheFly > 0 || this.clientIgnoringOnTheFly > 0) {\r\n\t\t\toutput.State.ignoringOnTheFly = {};\r\n\t\t\tif (this.serverIgnoringOnTheFly > 0) {\r\n\t\t\t\toutput.State.ignoringOnTheFly.server = this.serverIgnoringOnTheFly;\r\n\t\t\t\tthis.serverIgnoringOnTheFly = 0;\r\n\t\t\t}\r\n\t\t\tif (this.clientIgnoringOnTheFly > 0) {\r\n\t\t\t\toutput.State.ignoringOnTheFly.client = this.clientIgnoringOnTheFly;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconsole.log(output); // eslint-disable-line no-console\r\n\r\n\t\tthis.command(\"send\", output);\r\n\t}\r\n\r\n\tsendHello(username, room, password) {\r\n\t\tthis.currentUsername = username;\r\n\t\tthis.currentRoom = room;\r\n\r\n\t\tlet packet = {\r\n\t\t\t\"Hello\": {\r\n\t\t\t\tusername,\r\n\t\t\t\t\"room\": {\r\n\t\t\t\t\tname: room\r\n\t\t\t\t},\r\n\t\t\t\t\"version\": \"1.5.1\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif (password) {\r\n\t\t\tpacket.Hello.password = password;\r\n\t\t}\r\n\r\n\t\tthis.command(\"send\", packet);\r\n\t}\r\n\r\n\tsendListRequest() {\r\n\t\tthis.command(\"send\", {\"List\": null});\r\n\t}\r\n\r\n\tsendReady(ready) {\r\n\t\tlet packet = {\r\n\t\t\t\"Set\": {\r\n\t\t\t\t\"ready\": {\r\n\t\t\t\t\tisReady: ready,\r\n\t\t\t\t\tmanuallyInitiated: true,\r\n\t\t\t\t\tusername: this.currentUsername\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.command(\"send\", packet);\r\n\t}\r\n\r\n\tsendFile(duration, name) {\r\n\t\t// TODO size attribute for non-html5 video players?\r\n\t\tlet file = {duration, name, size: 1};\r\n\t\tthis.command(\"send\", {\r\n\t\t\t\"Set\": {\r\n\t\t\t\tfile\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\n// Adds the protocol to SyncWeb statically, so every Client has it\r\nSyncWeb.Client.addStaticProtocol(new WebSocketProtocol());","window.SyncWeb = SyncWeb;"]}