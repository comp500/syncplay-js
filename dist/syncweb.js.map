{"version":3,"sources":["syncweb.js","index.js","EventEmitter.js","WebSocketProtocol.js","export.js"],"names":["SyncWeb","callback","totalList","e","console","version","realversion","features","motd","connectedString","Object","name","message","output","username","packet","isReady","manuallyInitiated","file","window"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACAA;ADWA;AACA;AEbA;AAAA;AFgBA;AEfA;AACA;AACA;AFiBA;AACA;AACA;AACA;AEjBA;AACA;AACA;AACA;AACA;AFmBA;AACA;AACA;AEnBA;AFqBA;AEpBA;AACAC;AACA;AACA;AACA;AACA;AFsBA;AACA;AACA;AErBA;AACA;AFuBA;AACA;AACA;AEtBA;AFwBA;AEtBA;AACA;AACAC;AACA;AACAA;AACA;AACAA;AACA;AACA;AACA;AFwBA;AEtBA;AACAA;AACA;AFwBA;AEtBA;AACA;AFwBA;AACA;AACA;AEvBA;AACA;AFyBA;AEvBA;AACA;AACA;AFyBA;AACA;AACA;AACA;AACA;AE1BAF;ACvDA;AHoFA;AACA;AACA;AACA;AGpFA;AAAA;AHuFA;AGvFA;AHyFA;AGtFA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAUA;AHyFA;AACA;AACA;AACA;AG1FA;AH4FA;AG3FA;AH6FA;AG3FA;AACAC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AH6FA;AG3FA;AACA;AACAE;AACA;AACA;AACA;AACA;AACA;AACA;AH6FA;AACA;AACA;AG5FAC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AA6BA;AH8FA;AACA;AACA;AG9FA;AHgGA;AG/FA;AACAA;AHiGA;AG/FA;AACAA;AACA;AACA;AHiGA;AG/FA;AACAA;AACA;AACA;AACAC;AACAC;AACAC;AACAC;AAJA;AAMA;AACA;AACAC;AAEA;AACA;AACA;AACA;AHgGA;AG9FA;AACAL;AACA;AACA;AACAM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AHgGA;AG9FA;AACA;AACA;AHgGA;AG9FA;AACA;AACA;AHgGA;AG9FA;AACA;AACAA;AACAA;AACA;AACA;AACA;AACA;AACA;AACA;AHgGA;AG9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AHgGA;AG9FA;AACA;AACAC;AACAC;AAFA;AAIA;AHgGA;AG9FA;AACA;AHgGA;AACA;AACA;AG/FA;AACA;AACAC;AHiGA;AG/FA;AACAA;AACAA;AACAA;AACA;AACAA;AACA;AACA;AACA;AHiGA;AG/FAA;AACAA;AACAA;AACAA;AHiGA;AG/FA;AAAA;AACA;AACA;AHkGA;AGhGA;AACAA;AACA;AACAA;AACA;AACA;AACA;AACAA;AACA;AACA;AHkGA;AGhGAT;AHkGA;AGhGA;AACA;AHkGA;AACA;AACA;AGjGA;AACA;AHmGA;AGjGA;AACA;AACAU;AACA;AACAH;AADA;AAGA;AALA;AADA;AH2GA;AGjGA;AACAI;AACA;AHmGA;AGjGA;AACA;AHmGA;AACA;AACA;AGlGA;AACA;AHoGA;AACA;AACA;AGnGA;AACA;AACA;AACAC;AACAC;AACAH;AAHA;AADA;AADA;AASA;AACA;AHqGA;AACA;AACA;AGpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAI;AADA;AADA;AAKA;AACA;AHsGA;AACA;AACA;AACA;AACA;AGvGAlB;AC1RAmB","file":"syncweb.js","sourcesContent":[null,"/* eslint-disable no-unused-vars */\r\nlet SyncWeb = {};\r\nSyncWeb.util = {};","class EventEmitter {\r\n\tconstructor() {\r\n\t\tthis.eventList = {};\r\n\t\tthis.activeEvents = true;\r\n\t}\r\n\r\n\ton(name, callback) {\r\n\t\tif (this.eventList[name] == null) {\r\n\t\t\tthis.eventList[name] = [];\r\n\t\t}\r\n\t\tthis.eventList[name].push(callback);\r\n\t}\r\n\r\n\tonce(name, callback) {\r\n\t\tlet modifiedCallback = (data) => {\r\n\t\t\tcallback(data);\r\n\t\t\tthis.removeListener(name, modifiedCallback);\r\n\t\t};\r\n\t\tthis.on(name, modifiedCallback);\r\n\t}\r\n\r\n\tany(callback) {\r\n\t\tthis.on(\"*\", callback);\r\n\t}\r\n\r\n\temit(name, data) {\r\n\t\tif (!this.activeEvents) return 0;\r\n\r\n\t\tlet totalList;\r\n\t\tif (this.eventList[name] && this.eventList[\"*\"]) {\r\n\t\t\ttotalList = this.eventList[name].concat(this.eventList[\"*\"]);\r\n\t\t} else if (this.eventList[name]) {\r\n\t\t\ttotalList = this.eventList[name];\r\n\t\t} else if (this.eventList[\"*\"]) {\r\n\t\t\ttotalList = this.eventList[\"*\"]\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < totalList.length; i++) {\r\n\t\t\ttotalList[i](name, data);\r\n\t\t}\r\n\r\n\t\treturn totalList.length;\r\n\t}\r\n\r\n\tremoveListener(name, callback) {\r\n\t\t// TODO: find a way to gracefully report problems like this\r\n\t\tif (!this.eventList[name]) return;\r\n\r\n\t\tlet index = this.eventList[name].indexOf(callback);\r\n\t\tif (index > -1) this.eventList.splice(index, 1);\r\n\t}\r\n}\r\n\r\nSyncWeb.util.EventEmitter = EventEmitter;","/* global EventEmitter */\r\n\r\nclass WebSocketProtocol extends EventEmitter {\r\n\tconstructor() {\r\n\t\tsuper(\"WebSocket-builtin\");\r\n\r\n\t\tthis.currentPosition = 0.0;\r\n\t\tthis.paused = true;\r\n\t\tthis.doSeek = false;\r\n\t\tthis.isReady = false;\r\n\t\tthis.roomdetails = {};\r\n\t\tthis.clientIgnoringOnTheFly = 0;\r\n\t\tthis.serverIgnoringOnTheFly = 0;\r\n\t}\r\n\r\n\tconnect(options, callback) {\r\n\t\tthis.socket = new WebSocket(options.url);\r\n\r\n\t\tthis.socket.addEventListener(\"open\", () => {\r\n\t\t\tcallback();\r\n\t\t\tif (options.password) {\r\n\t\t\t\tthis.sendHello(options.name, options.room, options.password);\r\n\t\t\t} else {\r\n\t\t\t\tthis.sendHello(options.name, options.room);\r\n\t\t\t}\r\n\t\t\tthis.sendReady();\r\n\t\t\tthis.sendListRequest();\r\n\t\t\tif (this.currentFile) {\r\n\t\t\t\tthis.sendFile();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.socket.addEventListener(\"message\", (e) => {\r\n\t\t\tthis.emit(\"message\", e.data);\r\n\t\t\te.data.split(\"\\n\").forEach(messageText => {\r\n\t\t\t\tif (messageText == null) return;\r\n\t\t\t\tif (messageText.length < 1) return;\r\n\t\t\t\tthis.parseMessage(messageText);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tevent(event, data) {\r\n\t\tconsole.log(\"event: \", event, data); // eslint-disable-line no-console\r\n\t\tswitch (event) {\r\n\t\t\tcase \"send\":\r\n\t\t\t\tthis.socket.send(JSON.stringify(data));\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"setmeta\":\r\n\t\t\t\tthis.sendFile(data.duration, data.name);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"settime\":\r\n\t\t\t\tthis.currentPosition = data;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"seek\":\r\n\t\t\t\tthis.currentPosition = data;\r\n\t\t\t\tthis.doSeek = true;\r\n\t\t\t\tthis.sendState();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pause\":\r\n\t\t\t\tthis.paused = true;\r\n\t\t\t\tthis.sendState();\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"unpause\":\r\n\t\t\t\tthis.paused = false;\r\n\t\t\t\tif (!this.isReady) {\r\n\t\t\t\t\t// potential problem: unpause is sent from video.play()\r\n\t\t\t\t\t// could result in unintentional ready setting\r\n\t\t\t\t\tthis.isReady = true;\r\n\t\t\t\t\tthis.sendReady();\r\n\t\t\t\t}\r\n\t\t\t\tthis.sendState();\r\n\t\t}\r\n\t}\r\n\r\n\tparseMessage(message) {\r\n\t\tlet parsed = JSON.parse(message);\r\n\t\tconsole.log(\"SERVER:\", parsed); // eslint-disable-line no-console\r\n\r\n\t\tif (parsed.Error) {\r\n\t\t\tconsole.log(\"err\", parsed.Error); // eslint-disable-line no-console\r\n\t\t\t// TODO disconnect\r\n\t\t}\r\n\r\n\t\tif (parsed.Hello) {\r\n\t\t\tconsole.log(\"hello\", parsed.Hello); // eslint-disable-line no-console\r\n\t\t\t// TODO handle failed logins, etc.\r\n\t\t\tthis.serverDetails = {\r\n\t\t\t\tversion: parsed.Hello.version,\r\n\t\t\t\trealversion: parsed.Hello.realversion,\r\n\t\t\t\tfeatures: parsed.Hello.features,\r\n\t\t\t\tmotd: parsed.Hello.motd\r\n\t\t\t};\r\n\t\t\tlet connectedString = `Connected to server, version ${parsed.Hello.version}.`;\r\n\t\t\tif (parsed.Hello.motd) {\r\n\t\t\t\tconnectedString += ` MOTD:\r\n\t\t\t\t${parsed.Hello.motd}`;\r\n\t\t\t}\r\n\t\t\tthis.emit(\"connected\", connectedString);\r\n\t\t\t// roomEventRequest?\r\n\t\t}\r\n\r\n\t\tif (parsed.Set) {\r\n\t\t\tconsole.log(\"set\", parsed.Set); // eslint-disable-line no-console\r\n\t\t\t// TODO playlists\r\n\t\t\tif (parsed.Set.user) {\r\n\t\t\t\tObject.keys(parsed.Set.user).forEach((key) => {\r\n\t\t\t\t\tlet user = parsed.Set.user[key];\r\n\t\t\t\t\tif (user.event) {\r\n\t\t\t\t\t\tif (user.event.joined) {\r\n\t\t\t\t\t\t\tthis.emit(\"joined\", key);\r\n\t\t\t\t\t\t\tthis.roomdetails[key] = {room: user.room.name};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (user.event.left) {\r\n\t\t\t\t\t\t\tthis.emit(\"left\", key);\r\n\t\t\t\t\t\t\tdelete this.roomdetails[key];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (this.roomdetails[key] && this.roomdetails[key].room != user.room.name) {\r\n\t\t\t\t\t\t\t// user has moved\r\n\t\t\t\t\t\t\tthis.roomdetails[key].room = user.room.name;\r\n\t\t\t\t\t\t\tthis.emit(\"moved\", {\"user\": key, \"room\": user.room.name});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (user.file) {\r\n\t\t\t\t\t\tthis.roomdetails[key].file = user.file;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.emit(\"roomdetails\", this.roomdetails);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (parsed.Set.ready) {\r\n\t\t\t\tthis.roomdetails[parsed.Set.ready.username].isReady = parsed.Set.ready.isReady;\r\n\t\t\t\tthis.roomdetails[parsed.Set.ready.username].manuallyInitiated = parsed.Set.ready.manuallyInitiated;\r\n\r\n\t\t\t\tthis.emit(\"roomdetails\", this.roomdetails);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (parsed.List) {\r\n\t\t\tthis.roomdetails = {};\r\n\t\t\tObject.keys(parsed.List).forEach((room) => {\r\n\t\t\t\tObject.keys(parsed.List[room]).forEach((user) => {\r\n\t\t\t\t\tthis.roomdetails[user] = parsed.List[room][user];\r\n\t\t\t\t\tthis.roomdetails[user].room = room;\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\tthis.emit(\"roomdetails\", parsed.List);\r\n\t\t}\r\n\r\n\t\tif (parsed.State) {\r\n\t\t\tif (parsed.State.ping.yourLatency != null) {\r\n\t\t\t\tthis.clientRtt = parsed.State.ping.yourLatency;\r\n\t\t\t}\r\n\t\t\tthis.latencyCalculation = parsed.State.ping.latencyCalculation;\r\n\t\t\tif (parsed.State.ignoringOnTheFly && parsed.State.ignoringOnTheFly.server) {\r\n\t\t\t\tthis.serverIgnoringOnTheFly = parsed.State.ignoringOnTheFly.server;\r\n\t\t\t\tthis.clientIgnoringOnTheFly = 0;\r\n\t\t\t\tthis.stateChanged = false;\r\n\t\t\t}\r\n\t\t\tif (parsed.State.playstate) {\r\n\t\t\t\tif (parsed.State.playstate.setBy && parsed.State.playstate.setBy != this.currentUsername) {\r\n\t\t\t\t\tif (parsed.State.playstate.doSeek && !this.doSeek) {\r\n\t\t\t\t\t\tthis.emit(\"seek\", parsed.State.playstate.position);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.paused != parsed.State.playstate.paused) {\r\n\t\t\t\t\t\tif (parsed.State.playstate.paused) {\r\n\t\t\t\t\t\t\tthis.emit(\"pause\");\r\n\t\t\t\t\t\t\tthis.paused = true;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.emit(\"unpause\");\r\n\t\t\t\t\t\t\tthis.paused = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (parsed.Chat) {\r\n\t\t\tthis.emit(\"chat\", {\r\n\t\t\t\tname: parsed.Chat.username,\r\n\t\t\t\tmessage: parsed.Chat.message\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.sendState();\r\n\t}\r\n\r\n\tsendState() {\r\n\t\tlet clientIgnoreIsNotSet = (this.clientIgnoringOnTheFly == 0 || this.serverIgnoringOnTheFly != 0);\r\n\t\tlet output = {};\r\n\t\toutput.State = {};\r\n\r\n\t\tif (clientIgnoreIsNotSet) {\r\n\t\t\toutput.State.playstate = {};\r\n\t\t\toutput.State.playstate.position = this.currentPosition;\r\n\t\t\toutput.State.playstate.paused = this.paused;\r\n\t\t\tif (this.doSeek) {\r\n\t\t\t\toutput.State.playstate.doSeek = true;\r\n\t\t\t\tthis.doSeek = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\toutput.State.ping = {};\r\n\t\toutput.State.ping.latencyCalculation = this.latencyCalculation;\r\n\t\toutput.State.ping.clientLatencyCalculation = Date.now() / 1000;\r\n\t\toutput.State.ping.clientRtt = this.clientRtt;\r\n\r\n\t\tif (this.stateChanged) { // TODO update this properly\r\n\t\t\tthis.clientIgnoringOnTheFly += 1;\r\n\t\t}\r\n\r\n\t\tif (this.serverIgnoringOnTheFly > 0 || this.clientIgnoringOnTheFly > 0) {\r\n\t\t\toutput.State.ignoringOnTheFly = {};\r\n\t\t\tif (this.serverIgnoringOnTheFly > 0) {\r\n\t\t\t\toutput.State.ignoringOnTheFly.server = this.serverIgnoringOnTheFly;\r\n\t\t\t\tthis.serverIgnoringOnTheFly = 0;\r\n\t\t\t}\r\n\t\t\tif (this.clientIgnoringOnTheFly > 0) {\r\n\t\t\t\toutput.State.ignoringOnTheFly.client = this.clientIgnoringOnTheFly;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconsole.log(output); // eslint-disable-line no-console\r\n\r\n\t\tthis.event(\"send\", output);\r\n\t}\r\n\r\n\tsendHello(username, room, password) {\r\n\t\tthis.currentUsername = username;\r\n\t\tthis.currentRoom = room;\r\n\r\n\t\tlet packet = {\r\n\t\t\t\"Hello\": {\r\n\t\t\t\tusername,\r\n\t\t\t\t\"room\": {\r\n\t\t\t\t\tname: room\r\n\t\t\t\t},\r\n\t\t\t\t\"version\": \"1.5.1\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif (password) {\r\n\t\t\tpacket.Hello.password = password;\r\n\t\t}\r\n\r\n\t\tthis.event(\"send\", packet);\r\n\t}\r\n\r\n\tsendListRequest() {\r\n\t\tthis.event(\"send\", {\"List\": null});\r\n\t}\r\n\r\n\tsendReady() {\r\n\t\tlet packet = {\r\n\t\t\t\"Set\": {\r\n\t\t\t\t\"ready\": {\r\n\t\t\t\t\tisReady: this.isReady,\r\n\t\t\t\t\tmanuallyInitiated: true,\r\n\t\t\t\t\tusername: this.currentUsername\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.event(\"send\", packet);\r\n\t}\r\n\r\n\tsendFile(duration, name) {\r\n\t\tif (name) {\r\n\t\t\t// TODO size attribute for non-html5 video players?\r\n\t\t\t// 0 means unknown duration\r\n\t\t\tif (!duration) duration = 0;\r\n\t\t\tthis.currentFile = {duration, name, size: 0};\r\n\t\t}\r\n\t\tthis.event(\"send\", {\r\n\t\t\t\"Set\": {\r\n\t\t\t\tfile: this.currentFile\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.sendListRequest();\r\n\t}\r\n}\r\n\r\nSyncWeb.Client = WebSocketProtocol;","window.SyncWeb = SyncWeb;"]}