{"version":3,"sources":["syncweb.min.js","index.js","ArrayHandlers.js","EventEmitter.js","Protocol.js","Player.js","PlayerProxy.js","Client.js","WebSocketProtocol.js","export.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","TypeError","create","constructor","value","setPrototypeOf","__proto__","_classCallCheck","instance","SyncWeb","ArrayHandlers","get","content","array","find","itemFound","name","includes","remove","index","splice","EventEmitter","this","eventList","activeEvents","callback","push","_this","on","modifiedCallback","data","removeListener","totalList","indexOf","Protocol","_EventEmitter","_this2","getPrototypeOf","Player","PlayerProxy","staticProtocolList","staticPlayerProxyList","staticPlayerList","Client","_EventEmitter2","playerElement","_this3","protocolList","playerList","playerProxyList","state","forEach","player","protocol","playerProxy","options","_this4","Error","fetchedProtocol","getProtocol","undefined","currentProtocol","proxyEvents","setURL","url","event","currentPlayer","command","supports","proxyCommand","foundPlayer","WebSocketProtocol","_SyncWeb$Protocol","_this5","currentPosition","paused","doSeek","isReady","_this6","socket","WebSocket","addEventListener","sendHello","sendReady","e","emit","messageText","parseMessage","_command","console","send","JSON","stringify","sendFile","duration","sendState","message","parsed","parse","Hello","serverDetails","version","realversion","features","motd","connectedString","Set","List","State","ping","yourLatency","clientRtt","latencyCalculation","ignoringOnTheFly","server","serverIgnoringOnTheFly","clientIgnoringOnTheFly","stateChanged","playstate","setBy","currentUsername","position","clientIgnoreIsNotSet","output","username","room","password","currentRoom","packet","ready","manuallyInitiated","file","size","window"],"mappings":"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","file":"syncweb.min.js","sourcesContent":["(function() {\n\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* eslint-disable no-unused-vars */\nvar SyncWeb = {};\nSyncWeb.util = {};\nvar ArrayHandlers = {\n\tget: function get(array, content) {\n\t\tif (typeof content == \"string\") {\n\t\t\treturn array.find(function (itemFound) {\n\t\t\t\treturn itemFound.name == content;\n\t\t\t});\n\t\t} else {\n\t\t\tif (array.includes(content)) {\n\t\t\t\treturn content;\n\t\t\t} else {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\t},\n\tremove: function remove(array, content) {\n\t\tvar index = void 0;\n\t\tif (typeof content == \"string\") {\n\t\t\tindex = array.findIndex(function (itemFound) {\n\t\t\t\treturn itemFound.name == content;\n\t\t\t});\n\t\t} else {\n\t\t\tindex = array.indexOf(content);\n\t\t}\n\t\tif (index > -1) array.splice(index, 1);\n\t}\n};\n\nSyncWeb.util.ArrayHandlers = ArrayHandlers;\n\nvar EventEmitter = function () {\n\tfunction EventEmitter() {\n\t\t_classCallCheck(this, EventEmitter);\n\n\t\tthis.eventList = {};\n\t\tthis.activeEvents = true;\n\t}\n\n\t_createClass(EventEmitter, [{\n\t\tkey: \"on\",\n\t\tvalue: function on(name, callback) {\n\t\t\tif (this.eventList[name] == null) {\n\t\t\t\tthis.eventList[name] = [];\n\t\t\t}\n\t\t\tthis.eventList[name].push(callback);\n\t\t}\n\t}, {\n\t\tkey: \"once\",\n\t\tvalue: function once(name, callback) {\n\t\t\tvar _this = this;\n\n\t\t\tvar modifiedCallback = function modifiedCallback(data) {\n\t\t\t\tcallback(data);\n\t\t\t\t_this.removeListener(name, modifiedCallback);\n\t\t\t};\n\t\t\tthis.on(name, modifiedCallback);\n\t\t}\n\t}, {\n\t\tkey: \"any\",\n\t\tvalue: function any(callback) {\n\t\t\tthis.on(\"*\", callback);\n\t\t}\n\t}, {\n\t\tkey: \"emit\",\n\t\tvalue: function emit(name, data) {\n\t\t\tif (!this.activeEvents) return 0;\n\n\t\t\tvar totalList = void 0;\n\t\t\tif (this.eventList[name] && this.eventList[\"*\"]) {\n\t\t\t\ttotalList = this.eventList[name].concat(this.eventList[\"*\"]);\n\t\t\t} else if (this.eventList[name]) {\n\t\t\t\ttotalList = this.eventList[name];\n\t\t\t} else if (this.eventList[\"*\"]) {\n\t\t\t\ttotalList = this.eventList[\"*\"];\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < totalList.length; i++) {\n\t\t\t\ttotalList[i](name, data);\n\t\t\t}\n\n\t\t\treturn totalList.length;\n\t\t}\n\t}, {\n\t\tkey: \"removeListener\",\n\t\tvalue: function removeListener(name, callback) {\n\t\t\t// TODO: find a way to gracefully report problems like this\n\t\t\tif (!this.eventList[name]) return;\n\n\t\t\tvar index = this.eventList[name].indexOf(callback);\n\t\t\tif (index > -1) this.eventList.splice(index, 1);\n\t\t}\n\t}]);\n\n\treturn EventEmitter;\n}();\n\nSyncWeb.util.EventEmitter = EventEmitter;\n/* global EventEmitter */\n\nvar Protocol = function (_EventEmitter) {\n\t_inherits(Protocol, _EventEmitter);\n\n\tfunction Protocol(name) {\n\t\t_classCallCheck(this, Protocol);\n\n\t\tvar _this2 = _possibleConstructorReturn(this, (Protocol.__proto__ || Object.getPrototypeOf(Protocol)).call(this));\n\n\t\t_this2.name = name;\n\t\treturn _this2;\n\t}\n\n\treturn Protocol;\n}(EventEmitter);\n\nSyncWeb.Protocol = Protocol;\n\nvar Player = function Player(name) {\n\t_classCallCheck(this, Player);\n\n\tthis.name = name;\n};\n\nSyncWeb.Player = Player;\n\nvar PlayerProxy = function PlayerProxy(name) {\n\t_classCallCheck(this, PlayerProxy);\n\n\tthis.name = name;\n};\n\nSyncWeb.PlayerProxy = PlayerProxy;\n/* global EventEmitter, ArrayHandlers */\n\nvar staticProtocolList = [];\nvar staticPlayerProxyList = [];\nvar staticPlayerList = [];\n\nvar Client = function (_EventEmitter2) {\n\t_inherits(Client, _EventEmitter2);\n\n\tfunction Client(playerElement) {\n\t\t_classCallCheck(this, Client);\n\n\t\tvar _this3 = _possibleConstructorReturn(this, (Client.__proto__ || Object.getPrototypeOf(Client)).call(this));\n\n\t\t_this3.protocolList = staticProtocolList;\n\t\t_this3.playerList = staticPlayerList;\n\t\t_this3.playerProxyList = staticPlayerProxyList;\n\t\t_this3.state = 0;\n\t\t_this3.playerElement = playerElement;\n\n\t\t_this3.playerList.forEach(function (player) {\n\t\t\tplayer.initialise(_this3);\n\t\t});\n\t\treturn _this3;\n\t}\n\n\t_createClass(Client, [{\n\t\tkey: \"addProtocol\",\n\t\tvalue: function addProtocol(protocol) {\n\t\t\tthis.protocolList.push(protocol);\n\t\t}\n\t}, {\n\t\tkey: \"getProtocol\",\n\t\tvalue: function getProtocol(protocol) {\n\t\t\treturn ArrayHandlers.get(this.protocolList, protocol);\n\t\t}\n\t}, {\n\t\tkey: \"removeProtocol\",\n\t\tvalue: function removeProtocol(protocol) {\n\t\t\tArrayHandlers.remove(this.protocolList, protocol);\n\t\t}\n\t}, {\n\t\tkey: \"addPlayer\",\n\t\tvalue: function addPlayer(player) {\n\t\t\tthis.playerList.push(player);\n\t\t}\n\t}, {\n\t\tkey: \"getPlayer\",\n\t\tvalue: function getPlayer(player) {\n\t\t\treturn ArrayHandlers.get(this.playerList, player);\n\t\t}\n\t}, {\n\t\tkey: \"removePlayer\",\n\t\tvalue: function removePlayer(player) {\n\t\t\tArrayHandlers.remove(this.playerList, player);\n\t\t}\n\t}, {\n\t\tkey: \"addPlayerProxy\",\n\t\tvalue: function addPlayerProxy(playerProxy) {\n\t\t\tthis.playerProxyList.push(playerProxy);\n\t\t}\n\t}, {\n\t\tkey: \"getPlayerProxy\",\n\t\tvalue: function getPlayerProxy(playerProxy) {\n\t\t\treturn ArrayHandlers.get(this.playerProxyList, playerProxy);\n\t\t}\n\t}, {\n\t\tkey: \"removePlayerProxy\",\n\t\tvalue: function removePlayerProxy(playerProxy) {\n\t\t\tArrayHandlers.remove(this.playerProxyList, playerProxy);\n\t\t}\n\t}, {\n\t\tkey: \"connect\",\n\t\tvalue: function connect(protocol, options) {\n\t\t\tvar _this4 = this;\n\n\t\t\tif (this.state != 0) {\n\t\t\t\t// TODO: general error handler instead of throwing errors?\n\t\t\t\tthrow new Error(\"Client is currently connected, must disconnect first before reconnecting.\");\n\t\t\t}\n\n\t\t\tvar fetchedProtocol = this.getProtocol(protocol);\n\t\t\tif (fetchedProtocol == undefined || !fetchedProtocol) {\n\t\t\t\tthrow new Error(\"No protocol of that name is loaded!\");\n\t\t\t}\n\n\t\t\tthis.currentProtocol = fetchedProtocol;\n\t\t\tthis.state = 1;\n\n\t\t\tthis.proxyEvents(\"connecting\", protocol);\n\t\t\tfetchedProtocol.any(this.proxyEvents.bind(this));\n\t\t\tfetchedProtocol.on(\"seturl\", function (event, url) {\n\t\t\t\t_this4.setURL(url);\n\t\t\t});\n\n\t\t\t// TODO: implement some sort of log system, for errors, connection progress etc.\n\n\t\t\tfetchedProtocol.connect(options, function () {\n\t\t\t\tif (_this4.state != 1) {\n\t\t\t\t\treturn; // ignore event if not in connecting state\n\t\t\t\t}\n\t\t\t\t_this4.state = 2;\n\t\t\t\t_this4.proxyEvents(\"connected\");\n\t\t\t});\n\t\t}\n\n\t\t// events relay status, such as \"connected\", \"connecting\" etc.\n\n\t}, {\n\t\tkey: \"proxyEvents\",\n\t\tvalue: function proxyEvents(event, data) {\n\t\t\tfor (var i = 0; i < this.playerProxyList.length; i++) {\n\t\t\t\tthis.playerProxyList[i].on(event, data);\n\t\t\t}\n\t\t\tif (this.currentPlayer) {\n\t\t\t\t// players must not respond to seturl\n\t\t\t\tthis.currentPlayer.on(event, data);\n\t\t\t}\n\t\t}\n\n\t\t// commands relay information about change of state, e.g. protocol tells player to pause\n\n\t}, {\n\t\tkey: \"proxyCommand\",\n\t\tvalue: function proxyCommand(command, data) {\n\t\t\tif (this.currentPlayer) {\n\t\t\t\tfor (var i = 0; i < this.playerProxyList.length; i++) {\n\t\t\t\t\tthis.playerProxyList[i].command(command, data);\n\t\t\t\t}\n\t\t\t\tthis.currentPlayer.command(command, data);\n\t\t\t} else {\n\t\t\t\t// TODO: maybe error if problematic?\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"proxyCommandToProtocol\",\n\t\tvalue: function proxyCommandToProtocol(command, data) {\n\t\t\t// TODO: Should players emit (and have proxied) events?\n\t\t\tif (this.currentPlayer) {\n\t\t\t\tfor (var i = 0; i < this.playerProxyList.length; i++) {\n\t\t\t\t\tthis.playerProxyList[i].command(command, data);\n\t\t\t\t}\n\t\t\t\tthis.currentProtocol.command(command, data);\n\t\t\t} else {\n\t\t\t\t// TODO: maybe error if problematic?\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"setURL\",\n\t\tvalue: function setURL(url) {\n\t\t\tif (this.currentPlayer) {\n\t\t\t\t// TODO: what happens when a http player\n\t\t\t\t//       and yt player coexist? how do\n\t\t\t\t//       we choose which to use?\n\t\t\t\tif (this.currentPlayer.supports(url)) {\n\t\t\t\t\tthis.proxyCommand(\"seturl\", url);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar foundPlayer = this.playerList.find(function (player) {\n\t\t\t\treturn player.supports(url);\n\t\t\t});\n\t\t\tif (foundPlayer) {\n\t\t\t\t// if player is found, switch to it\n\t\t\t\tif (this.currentPlayer) this.currentPlayer.command(\"terminate\");\n\t\t\t\tthis.currentPlayer = foundPlayer;\n\t\t\t\tthis.proxyCommand(\"seturl\", url);\n\t\t\t} else {\n\t\t\t\t// TODO: handle no players to play url\n\t\t\t\t//       catch-all player?\n\t\t\t\tthrow new Error(\"No players to handle URL available\");\n\t\t\t}\n\t\t}\n\t}], [{\n\t\tkey: \"addStaticProtocol\",\n\t\tvalue: function addStaticProtocol(protocol) {\n\t\t\tstaticProtocolList.push(protocol);\n\t\t}\n\t}, {\n\t\tkey: \"getStaticProtocol\",\n\t\tvalue: function getStaticProtocol(protocol) {\n\t\t\treturn ArrayHandlers.get(staticProtocolList, protocol);\n\t\t}\n\t}, {\n\t\tkey: \"removeStaticProtocol\",\n\t\tvalue: function removeStaticProtocol(protocol) {\n\t\t\tArrayHandlers.remove(staticProtocolList, protocol);\n\t\t}\n\t}, {\n\t\tkey: \"addStaticPlayer\",\n\t\tvalue: function addStaticPlayer(player) {\n\t\t\tstaticPlayerList.push(player);\n\t\t}\n\t}, {\n\t\tkey: \"getStaticPlayer\",\n\t\tvalue: function getStaticPlayer(player) {\n\t\t\treturn ArrayHandlers.get(staticPlayerList, player);\n\t\t}\n\t}, {\n\t\tkey: \"removeStaticPlayer\",\n\t\tvalue: function removeStaticPlayer(player) {\n\t\t\tArrayHandlers.remove(staticPlayerList, player);\n\t\t}\n\t}, {\n\t\tkey: \"addStaticPlayerProxy\",\n\t\tvalue: function addStaticPlayerProxy(playerProxy) {\n\t\t\tstaticPlayerProxyList.push(playerProxy);\n\t\t}\n\t}, {\n\t\tkey: \"getStaticPlayerProxy\",\n\t\tvalue: function getStaticPlayerProxy(playerProxy) {\n\t\t\treturn ArrayHandlers.get(staticPlayerProxyList, playerProxy);\n\t\t}\n\t}, {\n\t\tkey: \"removeStaticPlayerProxy\",\n\t\tvalue: function removeStaticPlayerProxy(playerProxy) {\n\t\t\tArrayHandlers.remove(staticPlayerProxyList, playerProxy);\n\t\t}\n\t}]);\n\n\treturn Client;\n}(EventEmitter);\n\nSyncWeb.Client = Client;\n\nvar WebSocketProtocol = function (_SyncWeb$Protocol) {\n\t_inherits(WebSocketProtocol, _SyncWeb$Protocol);\n\n\tfunction WebSocketProtocol() {\n\t\t_classCallCheck(this, WebSocketProtocol);\n\n\t\tvar _this5 = _possibleConstructorReturn(this, (WebSocketProtocol.__proto__ || Object.getPrototypeOf(WebSocketProtocol)).call(this, \"WebSocket-builtin\"));\n\n\t\t_this5.currentPosition = 0.0;\n\t\t_this5.paused = true;\n\t\t_this5.doSeek = false;\n\t\t_this5.isReady = false;\n\t\treturn _this5;\n\t}\n\n\t_createClass(WebSocketProtocol, [{\n\t\tkey: \"connect\",\n\t\tvalue: function connect(options, callback) {\n\t\t\tvar _this6 = this;\n\n\t\t\tthis.socket = new WebSocket(options.url);\n\n\t\t\tthis.socket.addEventListener(\"open\", function () {\n\t\t\t\tcallback();\n\t\t\t\t_this6.sendHello(\"comp500\", \"test\");\n\t\t\t\t_this6.sendReady();\n\t\t\t});\n\n\t\t\tthis.socket.addEventListener(\"message\", function (e) {\n\t\t\t\t_this6.emit(\"message\", e.data);\n\t\t\t\te.data.split(\"\\n\").forEach(function (messageText) {\n\t\t\t\t\tif (messageText == null) return;\n\t\t\t\t\tif (messageText.length < 1) return;\n\t\t\t\t\t_this6.parseMessage(messageText);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: \"command\",\n\t\tvalue: function command(_command, data) {\n\t\t\tconsole.log(\"command: \", _command, data); // eslint-disable-line no-console\n\t\t\tif (_command == \"send\") {\n\t\t\t\tthis.socket.send(JSON.stringify(data));\n\t\t\t}\n\t\t\tif (_command == \"setmeta\") {\n\t\t\t\tthis.sendFile(data.duration, data.name);\n\t\t\t}\n\t\t\tif (_command == \"settime\") {\n\t\t\t\tthis.currentPosition = data;\n\t\t\t}\n\t\t\tif (_command == \"seek\") {\n\t\t\t\tthis.currentPosition = data;\n\t\t\t\tthis.doSeek = true;\n\t\t\t\tthis.sendState();\n\t\t\t}\n\t\t\tif (_command == \"pause\") {\n\t\t\t\tthis.paused = true;\n\t\t\t\tthis.sendState();\n\t\t\t}\n\t\t\tif (_command == \"unpause\") {\n\t\t\t\tthis.paused = false;\n\t\t\t\tif (!this.isReady) {\n\t\t\t\t\t// potential problem: unpause is sent from video.play()\n\t\t\t\t\t// could result in unintentional ready setting\n\t\t\t\t\tthis.isReady = true;\n\t\t\t\t\tthis.sendReady();\n\t\t\t\t}\n\t\t\t\tthis.sendState();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"parseMessage\",\n\t\tvalue: function parseMessage(message) {\n\t\t\tvar parsed = JSON.parse(message);\n\t\t\tconsole.log(\"SERVER:\", parsed); // eslint-disable-line no-console\n\n\t\t\tif (parsed.Error) {\n\t\t\t\tconsole.log(\"err\", parsed.Error); // eslint-disable-line no-console\n\t\t\t\t// TODO disconnect\n\t\t\t}\n\n\t\t\tif (parsed.Hello) {\n\t\t\t\tconsole.log(\"hello\", parsed.Hello); // eslint-disable-line no-console\n\t\t\t\t// TODO handle failed logins, etc.\n\t\t\t\tthis.serverDetails = {\n\t\t\t\t\tversion: parsed.Hello.version,\n\t\t\t\t\trealversion: parsed.Hello.realversion,\n\t\t\t\t\tfeatures: parsed.Hello.features,\n\t\t\t\t\tmotd: parsed.Hello.motd\n\t\t\t\t};\n\t\t\t\tvar connectedString = \"Connected to server, version \" + parsed.Hello.version + \".\";\n\t\t\t\tif (parsed.Hello.motd) {\n\t\t\t\t\tconnectedString += \" MOTD:\\n\\t\\t\\t\\t\" + parsed.Hello.motd;\n\t\t\t\t}\n\t\t\t\tthis.emit(\"connected\", connectedString);\n\t\t\t\t// roomEventRequest?\n\t\t\t}\n\n\t\t\tif (parsed.Set) {\n\t\t\t\tconsole.log(\"set\", parsed.Set); // eslint-disable-line no-console\n\t\t\t\t// TODO users, playlists\n\t\t\t}\n\n\t\t\tif (parsed.List) {\n\t\t\t\tconsole.log(\"list\", parsed.List); // eslint-disable-line no-console\n\t\t\t\tconsole.log(\"roomsList\", Object.keys(parsed.List)); // eslint-disable-line no-console\n\t\t\t\tconsole.log(\"userList\", Object.keys(parsed.List[this.currentRoom])); // eslint-disable-line no-console\n\t\t\t}\n\n\t\t\tif (parsed.State) {\n\t\t\t\t//console.log(\"state\", parsed.State); // eslint-disable-line no-console\n\t\t\t\tif (parsed.State.ping.yourLatency != null) {\n\t\t\t\t\tthis.clientRtt = parsed.State.ping.yourLatency;\n\t\t\t\t}\n\t\t\t\tthis.latencyCalculation = parsed.State.ping.latencyCalculation;\n\t\t\t\tif (parsed.State.ignoringOnTheFly && parsed.State.ignoringOnTheFly.server) {\n\t\t\t\t\tthis.serverIgnoringOnTheFly = parsed.State.ignoringOnTheFly.server;\n\t\t\t\t\tthis.clientIgnoringOnTheFly = 0;\n\t\t\t\t\tthis.stateChanged = false;\n\t\t\t\t}\n\t\t\t\tif (parsed.State.playstate) {\n\t\t\t\t\tif (parsed.State.playstate.setBy && parsed.State.playstate.setBy != this.currentUsername) {\n\t\t\t\t\t\tvar doSeek = parsed.State.playstate.doSeek;\n\t\t\t\t\t\t// falsy -> false, because null/undefined\n\t\t\t\t\t\tif (!doSeek) doSeek = false;\n\t\t\t\t\t\t/*console.log({ // eslint-disable-line no-console\r\n      \tsetBy: parsed.State.playstate.setBy,\r\n      \tpaused: parsed.State.playstate.paused,\r\n      \tposition: parsed.State.playstate.position,\r\n      \tdoSeek\r\n      });*/\n\n\t\t\t\t\t\t//this.currentPosition = parsed.State.playstate.position;\n\t\t\t\t\t\tif (doSeek && !this.doSeek) {\n\t\t\t\t\t\t\tthis.emit(\"seek\", parsed.State.playstate.position);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.paused != parsed.State.playstate.paused) {\n\t\t\t\t\t\t\tif (parsed.State.playstate.paused) {\n\t\t\t\t\t\t\t\tthis.emit(\"pause\");\n\t\t\t\t\t\t\t\tthis.paused = true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.emit(\"unpause\");\n\t\t\t\t\t\t\t\tthis.paused = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.sendState();\n\t\t}\n\t}, {\n\t\tkey: \"sendState\",\n\t\tvalue: function sendState() {\n\t\t\tvar clientIgnoreIsNotSet = this.clientIgnoringOnTheFly == 0 || this.serverIgnoringOnTheFly != 0;\n\t\t\tvar output = {};\n\t\t\toutput.State = {};\n\n\t\t\tif (clientIgnoreIsNotSet) {\n\t\t\t\toutput.State.playstate = {};\n\t\t\t\toutput.State.playstate.position = this.currentPosition;\n\t\t\t\toutput.State.playstate.paused = this.paused;\n\t\t\t\tif (this.doSeek) {\n\t\t\t\t\toutput.State.playstate.doSeek = true;\n\t\t\t\t\tthis.doSeek = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toutput.State.ping = {};\n\t\t\toutput.State.ping.latencyCalculation = this.latencyCalculation;\n\t\t\toutput.State.ping.clientLatencyCalculation = Date.now() / 1000;\n\t\t\toutput.State.ping.clientRtt = this.clientRtt;\n\n\t\t\tif (this.stateChanged) {\n\t\t\t\t// TODO update this properly\n\t\t\t\tthis.clientIgnoringOnTheFly += 1;\n\t\t\t}\n\n\t\t\tif (this.serverIgnoringOnTheFly > 0 || this.clientIgnoringOnTheFly > 0) {\n\t\t\t\toutput.State.ignoringOnTheFly = {};\n\t\t\t\tif (this.serverIgnoringOnTheFly > 0) {\n\t\t\t\t\toutput.State.ignoringOnTheFly.server = this.serverIgnoringOnTheFly;\n\t\t\t\t\tthis.serverIgnoringOnTheFly = 0;\n\t\t\t\t}\n\t\t\t\tif (this.clientIgnoringOnTheFly > 0) {\n\t\t\t\t\toutput.State.ignoringOnTheFly.client = this.clientIgnoringOnTheFly;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconsole.log(output); // eslint-disable-line no-console\n\n\t\t\tthis.command(\"send\", output);\n\t\t}\n\t}, {\n\t\tkey: \"sendHello\",\n\t\tvalue: function sendHello(username, room, password) {\n\t\t\tthis.currentUsername = username;\n\t\t\tthis.currentRoom = room;\n\n\t\t\tvar packet = {\n\t\t\t\t\"Hello\": {\n\t\t\t\t\tusername: username,\n\t\t\t\t\t\"room\": {\n\t\t\t\t\t\tname: room\n\t\t\t\t\t},\n\t\t\t\t\t\"version\": \"1.5.1\"\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (password) {\n\t\t\t\tpacket.Hello.password = password;\n\t\t\t}\n\n\t\t\tthis.command(\"send\", packet);\n\t\t}\n\t}, {\n\t\tkey: \"sendListRequest\",\n\t\tvalue: function sendListRequest() {\n\t\t\tthis.command(\"send\", { \"List\": null });\n\t\t}\n\t}, {\n\t\tkey: \"sendReady\",\n\t\tvalue: function sendReady() {\n\t\t\tvar packet = {\n\t\t\t\t\"Set\": {\n\t\t\t\t\t\"ready\": {\n\t\t\t\t\t\tisReady: this.isReady,\n\t\t\t\t\t\tmanuallyInitiated: true,\n\t\t\t\t\t\tusername: this.currentUsername\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.command(\"send\", packet);\n\t\t}\n\t}, {\n\t\tkey: \"sendFile\",\n\t\tvalue: function sendFile(duration, name) {\n\t\t\t// TODO size attribute for non-html5 video players?\n\t\t\tvar file = { duration: duration, name: name, size: 0 };\n\t\t\tthis.command(\"send\", {\n\t\t\t\t\"Set\": {\n\t\t\t\t\tfile: file\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}]);\n\n\treturn WebSocketProtocol;\n}(SyncWeb.Protocol);\n\n// Adds the protocol to SyncWeb statically, so every Client has it\n\n\nSyncWeb.Client.addStaticProtocol(new WebSocketProtocol());\nwindow.SyncWeb = SyncWeb;\n}());\n","/* eslint-disable no-unused-vars */\r\nlet SyncWeb = {};\r\nSyncWeb.util = {};","let ArrayHandlers = {\r\n\tget(array, content) {\r\n\t\tif (typeof content == \"string\") {\r\n\t\t\treturn array.find((itemFound) => {\r\n\t\t\t\treturn itemFound.name == content;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (array.includes(content)) {\r\n\t\t\t\treturn content;\r\n\t\t\t} else {\r\n\t\t\t\treturn undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tremove(array, content) {\r\n\t\tlet index;\r\n\t\tif (typeof content == \"string\") {\r\n\t\t\tindex = array.findIndex((itemFound) => {\r\n\t\t\t\treturn itemFound.name == content;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tindex = array.indexOf(content);\r\n\t\t}\r\n\t\tif (index > -1) array.splice(index, 1);\r\n\t}\r\n};\r\n\r\nSyncWeb.util.ArrayHandlers = ArrayHandlers;","class EventEmitter {\r\n\tconstructor() {\r\n\t\tthis.eventList = {};\r\n\t\tthis.activeEvents = true;\r\n\t}\r\n\r\n\ton(name, callback) {\r\n\t\tif (this.eventList[name] == null) {\r\n\t\t\tthis.eventList[name] = [];\r\n\t\t}\r\n\t\tthis.eventList[name].push(callback);\r\n\t}\r\n\r\n\tonce(name, callback) {\r\n\t\tlet modifiedCallback = (data) => {\r\n\t\t\tcallback(data);\r\n\t\t\tthis.removeListener(name, modifiedCallback);\r\n\t\t};\r\n\t\tthis.on(name, modifiedCallback);\r\n\t}\r\n\r\n\tany(callback) {\r\n\t\tthis.on(\"*\", callback);\r\n\t}\r\n\r\n\temit(name, data) {\r\n\t\tif (!this.activeEvents) return 0;\r\n\r\n\t\tlet totalList;\r\n\t\tif (this.eventList[name] && this.eventList[\"*\"]) {\r\n\t\t\ttotalList = this.eventList[name].concat(this.eventList[\"*\"]);\r\n\t\t} else if (this.eventList[name]) {\r\n\t\t\ttotalList = this.eventList[name];\r\n\t\t} else if (this.eventList[\"*\"]) {\r\n\t\t\ttotalList = this.eventList[\"*\"]\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < totalList.length; i++) {\r\n\t\t\ttotalList[i](name, data);\r\n\t\t}\r\n\r\n\t\treturn totalList.length;\r\n\t}\r\n\r\n\tremoveListener(name, callback) {\r\n\t\t// TODO: find a way to gracefully report problems like this\r\n\t\tif (!this.eventList[name]) return;\r\n\r\n\t\tlet index = this.eventList[name].indexOf(callback);\r\n\t\tif (index > -1) this.eventList.splice(index, 1);\r\n\t}\r\n}\r\n\r\nSyncWeb.util.EventEmitter = EventEmitter;","/* global EventEmitter */\r\n\r\nclass Protocol extends EventEmitter {\r\n\tconstructor(name) {\r\n\t\tsuper();\r\n\t\tthis.name = name;\r\n\t}\r\n}\r\n\r\nSyncWeb.Protocol = Protocol;","class Player {\r\n\tconstructor(name) {\r\n\t\tthis.name = name;\r\n\t}\r\n}\r\n\r\nSyncWeb.Player = Player;","class PlayerProxy {\r\n\tconstructor(name) {\r\n\t\tthis.name = name;\r\n\t}\r\n}\r\n\r\nSyncWeb.PlayerProxy = PlayerProxy;","/* global EventEmitter, ArrayHandlers */\r\n\r\nlet staticProtocolList = [];\r\nlet staticPlayerProxyList = [];\r\nlet staticPlayerList = [];\r\n\r\nclass Client extends EventEmitter {\r\n\tconstructor(playerElement) {\r\n\t\tsuper();\r\n\t\tthis.protocolList = staticProtocolList;\r\n\t\tthis.playerList = staticPlayerList;\r\n\t\tthis.playerProxyList = staticPlayerProxyList;\r\n\t\tthis.state = 0;\r\n\t\tthis.playerElement = playerElement;\r\n\r\n\t\tthis.playerList.forEach((player) => {\r\n\t\t\tplayer.initialise(this);\r\n\t\t});\r\n\t}\r\n\r\n\taddProtocol(protocol) {\r\n\t\tthis.protocolList.push(protocol);\r\n\t}\r\n\r\n\tgetProtocol(protocol) {\r\n\t\treturn ArrayHandlers.get(this.protocolList, protocol);\r\n\t}\r\n\r\n\tremoveProtocol(protocol) {\r\n\t\tArrayHandlers.remove(this.protocolList, protocol);\r\n\t}\r\n\r\n\tstatic addStaticProtocol(protocol) {\r\n\t\tstaticProtocolList.push(protocol);\r\n\t}\r\n\r\n\tstatic getStaticProtocol(protocol) {\r\n\t\treturn ArrayHandlers.get(staticProtocolList, protocol);\r\n\t}\r\n\r\n\tstatic removeStaticProtocol(protocol) {\r\n\t\tArrayHandlers.remove(staticProtocolList, protocol);\r\n\t}\r\n\r\n\taddPlayer(player) {\r\n\t\tthis.playerList.push(player);\r\n\t}\r\n\r\n\tgetPlayer(player) {\r\n\t\treturn ArrayHandlers.get(this.playerList, player);\r\n\t}\r\n\r\n\tremovePlayer(player) {\r\n\t\tArrayHandlers.remove(this.playerList, player);\r\n\t}\r\n\r\n\tstatic addStaticPlayer(player) {\r\n\t\tstaticPlayerList.push(player);\r\n\t}\r\n\r\n\tstatic getStaticPlayer(player) {\r\n\t\treturn ArrayHandlers.get(staticPlayerList, player);\r\n\t}\r\n\r\n\tstatic removeStaticPlayer(player) {\r\n\t\tArrayHandlers.remove(staticPlayerList, player);\r\n\t}\r\n\r\n\taddPlayerProxy(playerProxy) {\r\n\t\tthis.playerProxyList.push(playerProxy);\r\n\t}\r\n\r\n\tgetPlayerProxy(playerProxy) {\r\n\t\treturn ArrayHandlers.get(this.playerProxyList, playerProxy);\r\n\t}\r\n\r\n\tremovePlayerProxy(playerProxy) {\r\n\t\tArrayHandlers.remove(this.playerProxyList, playerProxy);\r\n\t}\r\n\r\n\tstatic addStaticPlayerProxy(playerProxy) {\r\n\t\tstaticPlayerProxyList.push(playerProxy);\r\n\t}\r\n\r\n\tstatic getStaticPlayerProxy(playerProxy) {\r\n\t\treturn ArrayHandlers.get(staticPlayerProxyList, playerProxy);\r\n\t}\r\n\r\n\tstatic removeStaticPlayerProxy(playerProxy) {\r\n\t\tArrayHandlers.remove(staticPlayerProxyList, playerProxy);\r\n\t}\r\n\r\n\tconnect(protocol, options) {\r\n\t\tif (this.state != 0) {\r\n\t\t\t// TODO: general error handler instead of throwing errors?\r\n\t\t\tthrow new Error(\"Client is currently connected, must disconnect first before reconnecting.\");\r\n\t\t}\r\n\r\n\t\tlet fetchedProtocol = this.getProtocol(protocol);\r\n\t\tif (fetchedProtocol == undefined || !fetchedProtocol) {\r\n\t\t\tthrow new Error(\"No protocol of that name is loaded!\");\r\n\t\t}\r\n\r\n\t\tthis.currentProtocol = fetchedProtocol;\r\n\t\tthis.state = 1;\r\n\r\n\t\tthis.proxyEvents(\"connecting\", protocol);\r\n\t\tfetchedProtocol.any(this.proxyEvents.bind(this));\r\n\t\tfetchedProtocol.on(\"seturl\", (event, url) => {\r\n\t\t\tthis.setURL(url);\r\n\t\t});\r\n\r\n\t\t// TODO: implement some sort of log system, for errors, connection progress etc.\r\n\r\n\t\tfetchedProtocol.connect(options, () => {\r\n\t\t\tif (this.state != 1) {\r\n\t\t\t\treturn; // ignore event if not in connecting state\r\n\t\t\t}\r\n\t\t\tthis.state = 2;\r\n\t\t\tthis.proxyEvents(\"connected\");\r\n\t\t});\r\n\t}\r\n\r\n\t// events relay status, such as \"connected\", \"connecting\" etc.\r\n\tproxyEvents(event, data) {\r\n\t\tfor (let i = 0; i < this.playerProxyList.length; i++) {\r\n\t\t\tthis.playerProxyList[i].on(event, data);\r\n\t\t}\r\n\t\tif (this.currentPlayer) {\r\n\t\t\t// players must not respond to seturl\r\n\t\t\tthis.currentPlayer.on(event, data);\r\n\t\t}\r\n\t}\r\n\r\n\t// commands relay information about change of state, e.g. protocol tells player to pause\r\n\tproxyCommand(command, data) {\r\n\t\tif (this.currentPlayer) {\r\n\t\t\tfor (let i = 0; i < this.playerProxyList.length; i++) {\r\n\t\t\t\tthis.playerProxyList[i].command(command, data);\r\n\t\t\t}\r\n\t\t\tthis.currentPlayer.command(command, data);\r\n\t\t} else {\r\n\t\t\t// TODO: maybe error if problematic?\r\n\t\t}\r\n\t}\r\n\r\n\tproxyCommandToProtocol(command, data) {\r\n\t\t// TODO: Should players emit (and have proxied) events?\r\n\t\tif (this.currentPlayer) {\r\n\t\t\tfor (let i = 0; i < this.playerProxyList.length; i++) {\r\n\t\t\t\tthis.playerProxyList[i].command(command, data);\r\n\t\t\t}\r\n\t\t\tthis.currentProtocol.command(command, data);\r\n\t\t} else {\r\n\t\t\t// TODO: maybe error if problematic?\r\n\t\t}\r\n\t}\r\n\r\n\tsetURL(url) {\r\n\t\tif (this.currentPlayer) {\r\n\t\t\t// TODO: what happens when a http player\r\n\t\t\t//       and yt player coexist? how do\r\n\t\t\t//       we choose which to use?\r\n\t\t\tif (this.currentPlayer.supports(url)) {\r\n\t\t\t\tthis.proxyCommand(\"seturl\", url);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet foundPlayer = this.playerList.find((player) => {\r\n\t\t\treturn player.supports(url);\r\n\t\t});\r\n\t\tif (foundPlayer) {\r\n\t\t\t// if player is found, switch to it\r\n\t\t\tif (this.currentPlayer) this.currentPlayer.command(\"terminate\");\r\n\t\t\tthis.currentPlayer = foundPlayer;\r\n\t\t\tthis.proxyCommand(\"seturl\", url);\r\n\t\t} else {\r\n\t\t\t// TODO: handle no players to play url\r\n\t\t\t//       catch-all player?\r\n\t\t\tthrow new Error(\"No players to handle URL available\");\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n\r\nSyncWeb.Client = Client;","class WebSocketProtocol extends SyncWeb.Protocol {\r\n\tconstructor() {\r\n\t\tsuper(\"WebSocket-builtin\");\r\n\r\n\t\tthis.currentPosition = 0.0;\r\n\t\tthis.paused = true;\r\n\t\tthis.doSeek = false;\r\n\t\tthis.isReady = false;\r\n\t}\r\n\r\n\tconnect(options, callback) {\r\n\t\tthis.socket = new WebSocket(options.url);\r\n\r\n\t\tthis.socket.addEventListener(\"open\", () => {\r\n\t\t\tcallback();\r\n\t\t\tthis.sendHello(\"comp500\", \"test\");\r\n\t\t\tthis.sendReady();\r\n\t\t});\r\n\r\n\t\tthis.socket.addEventListener(\"message\", (e) => {\r\n\t\t\tthis.emit(\"message\", e.data);\r\n\t\t\te.data.split(\"\\n\").forEach(messageText => {\r\n\t\t\t\tif (messageText == null) return;\r\n\t\t\t\tif (messageText.length < 1) return;\r\n\t\t\t\tthis.parseMessage(messageText);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tcommand(command, data) {\r\n\t\tconsole.log(\"command: \", command, data); // eslint-disable-line no-console\r\n\t\tif (command == \"send\") {\r\n\t\t\tthis.socket.send(JSON.stringify(data));\r\n\t\t}\r\n\t\tif (command == \"setmeta\") {\r\n\t\t\tthis.sendFile(data.duration, data.name);\r\n\t\t}\r\n\t\tif (command == \"settime\") {\r\n\t\t\tthis.currentPosition = data;\r\n\t\t}\r\n\t\tif (command == \"seek\") {\r\n\t\t\tthis.currentPosition = data;\r\n\t\t\tthis.doSeek = true;\r\n\t\t\tthis.sendState();\r\n\t\t}\r\n\t\tif (command == \"pause\") {\r\n\t\t\tthis.paused = true;\r\n\t\t\tthis.sendState();\r\n\t\t}\r\n\t\tif (command == \"unpause\") {\r\n\t\t\tthis.paused = false;\r\n\t\t\tif (!this.isReady) {\r\n\t\t\t\t// potential problem: unpause is sent from video.play()\r\n\t\t\t\t// could result in unintentional ready setting\r\n\t\t\t\tthis.isReady = true;\r\n\t\t\t\tthis.sendReady();\r\n\t\t\t}\r\n\t\t\tthis.sendState();\r\n\t\t}\r\n\t}\r\n\r\n\tparseMessage(message) {\r\n\t\tlet parsed = JSON.parse(message);\r\n\t\tconsole.log(\"SERVER:\", parsed); // eslint-disable-line no-console\r\n\r\n\t\tif (parsed.Error) {\r\n\t\t\tconsole.log(\"err\", parsed.Error); // eslint-disable-line no-console\r\n\t\t\t// TODO disconnect\r\n\t\t}\r\n\r\n\t\tif (parsed.Hello) {\r\n\t\t\tconsole.log(\"hello\", parsed.Hello); // eslint-disable-line no-console\r\n\t\t\t// TODO handle failed logins, etc.\r\n\t\t\tthis.serverDetails = {\r\n\t\t\t\tversion: parsed.Hello.version,\r\n\t\t\t\trealversion: parsed.Hello.realversion,\r\n\t\t\t\tfeatures: parsed.Hello.features,\r\n\t\t\t\tmotd: parsed.Hello.motd\r\n\t\t\t};\r\n\t\t\tlet connectedString = `Connected to server, version ${parsed.Hello.version}.`;\r\n\t\t\tif (parsed.Hello.motd) {\r\n\t\t\t\tconnectedString += ` MOTD:\r\n\t\t\t\t${parsed.Hello.motd}`;\r\n\t\t\t}\r\n\t\t\tthis.emit(\"connected\", connectedString);\r\n\t\t\t// roomEventRequest?\r\n\t\t}\r\n\r\n\t\tif (parsed.Set) {\r\n\t\t\tconsole.log(\"set\", parsed.Set); // eslint-disable-line no-console\r\n\t\t\t// TODO users, playlists\r\n\t\t}\r\n\r\n\t\tif (parsed.List) {\r\n\t\t\tconsole.log(\"list\", parsed.List); // eslint-disable-line no-console\r\n\t\t\tconsole.log(\"roomsList\", Object.keys(parsed.List)); // eslint-disable-line no-console\r\n\t\t\tconsole.log(\"userList\", Object.keys(parsed.List[this.currentRoom])); // eslint-disable-line no-console\r\n\t\t}\r\n\r\n\t\tif (parsed.State) {\r\n\t\t\t//console.log(\"state\", parsed.State); // eslint-disable-line no-console\r\n\t\t\tif (parsed.State.ping.yourLatency != null) {\r\n\t\t\t\tthis.clientRtt = parsed.State.ping.yourLatency;\r\n\t\t\t}\r\n\t\t\tthis.latencyCalculation = parsed.State.ping.latencyCalculation;\r\n\t\t\tif (parsed.State.ignoringOnTheFly && parsed.State.ignoringOnTheFly.server) {\r\n\t\t\t\tthis.serverIgnoringOnTheFly = parsed.State.ignoringOnTheFly.server;\r\n\t\t\t\tthis.clientIgnoringOnTheFly = 0;\r\n\t\t\t\tthis.stateChanged = false;\r\n\t\t\t}\r\n\t\t\tif (parsed.State.playstate) {\r\n\t\t\t\tif (parsed.State.playstate.setBy && parsed.State.playstate.setBy != this.currentUsername) {\r\n\t\t\t\t\tlet doSeek = parsed.State.playstate.doSeek;\r\n\t\t\t\t\t// falsy -> false, because null/undefined\r\n\t\t\t\t\tif (!doSeek) doSeek = false;\r\n\t\t\t\t\t/*console.log({ // eslint-disable-line no-console\r\n\t\t\t\t\t\tsetBy: parsed.State.playstate.setBy,\r\n\t\t\t\t\t\tpaused: parsed.State.playstate.paused,\r\n\t\t\t\t\t\tposition: parsed.State.playstate.position,\r\n\t\t\t\t\t\tdoSeek\r\n\t\t\t\t\t});*/\r\n\r\n\t\t\t\t\t//this.currentPosition = parsed.State.playstate.position;\r\n\t\t\t\t\tif (doSeek && !this.doSeek) {\r\n\t\t\t\t\t\tthis.emit(\"seek\", parsed.State.playstate.position);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.paused != parsed.State.playstate.paused) {\r\n\t\t\t\t\t\tif (parsed.State.playstate.paused) {\r\n\t\t\t\t\t\t\tthis.emit(\"pause\");\r\n\t\t\t\t\t\t\tthis.paused = true;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthis.emit(\"unpause\");\r\n\t\t\t\t\t\t\tthis.paused = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.sendState();\r\n\t}\r\n\r\n\tsendState() {\r\n\t\tlet clientIgnoreIsNotSet = (this.clientIgnoringOnTheFly == 0 || this.serverIgnoringOnTheFly != 0);\r\n\t\tlet output = {};\r\n\t\toutput.State = {};\r\n\r\n\t\tif (clientIgnoreIsNotSet) {\r\n\t\t\toutput.State.playstate = {};\r\n\t\t\toutput.State.playstate.position = this.currentPosition;\r\n\t\t\toutput.State.playstate.paused = this.paused;\r\n\t\t\tif (this.doSeek) {\r\n\t\t\t\toutput.State.playstate.doSeek = true;\r\n\t\t\t\tthis.doSeek = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\toutput.State.ping = {};\r\n\t\toutput.State.ping.latencyCalculation = this.latencyCalculation;\r\n\t\toutput.State.ping.clientLatencyCalculation = Date.now() / 1000;\r\n\t\toutput.State.ping.clientRtt = this.clientRtt;\r\n\r\n\t\tif (this.stateChanged) { // TODO update this properly\r\n\t\t\tthis.clientIgnoringOnTheFly += 1;\r\n\t\t}\r\n\r\n\t\tif (this.serverIgnoringOnTheFly > 0 || this.clientIgnoringOnTheFly > 0) {\r\n\t\t\toutput.State.ignoringOnTheFly = {};\r\n\t\t\tif (this.serverIgnoringOnTheFly > 0) {\r\n\t\t\t\toutput.State.ignoringOnTheFly.server = this.serverIgnoringOnTheFly;\r\n\t\t\t\tthis.serverIgnoringOnTheFly = 0;\r\n\t\t\t}\r\n\t\t\tif (this.clientIgnoringOnTheFly > 0) {\r\n\t\t\t\toutput.State.ignoringOnTheFly.client = this.clientIgnoringOnTheFly;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconsole.log(output); // eslint-disable-line no-console\r\n\r\n\t\tthis.command(\"send\", output);\r\n\t}\r\n\r\n\tsendHello(username, room, password) {\r\n\t\tthis.currentUsername = username;\r\n\t\tthis.currentRoom = room;\r\n\r\n\t\tlet packet = {\r\n\t\t\t\"Hello\": {\r\n\t\t\t\tusername,\r\n\t\t\t\t\"room\": {\r\n\t\t\t\t\tname: room\r\n\t\t\t\t},\r\n\t\t\t\t\"version\": \"1.5.1\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif (password) {\r\n\t\t\tpacket.Hello.password = password;\r\n\t\t}\r\n\r\n\t\tthis.command(\"send\", packet);\r\n\t}\r\n\r\n\tsendListRequest() {\r\n\t\tthis.command(\"send\", {\"List\": null});\r\n\t}\r\n\r\n\tsendReady() {\r\n\t\tlet packet = {\r\n\t\t\t\"Set\": {\r\n\t\t\t\t\"ready\": {\r\n\t\t\t\t\tisReady: this.isReady,\r\n\t\t\t\t\tmanuallyInitiated: true,\r\n\t\t\t\t\tusername: this.currentUsername\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.command(\"send\", packet);\r\n\t}\r\n\r\n\tsendFile(duration, name) {\r\n\t\t// TODO size attribute for non-html5 video players?\r\n\t\tlet file = {duration, name, size: 0};\r\n\t\tthis.command(\"send\", {\r\n\t\t\t\"Set\": {\r\n\t\t\t\tfile\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n\r\n// Adds the protocol to SyncWeb statically, so every Client has it\r\nSyncWeb.Client.addStaticProtocol(new WebSocketProtocol());","window.SyncWeb = SyncWeb;"]}