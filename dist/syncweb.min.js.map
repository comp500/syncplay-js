{"version":3,"sources":["syncweb.min.js","index.js","EventEmitter.js","PingService.js","WebSocketProtocol.js","export.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","SyncWeb","EventEmitter","this","eventList","activeEvents","value","name","callback","push","_this","on","modifiedCallback","data","removeListener","totalList","_len","arguments","Array","_key","_totalList","apply","index","indexOf","splice","PingService","pingMovingAverageWeight","roundTripTime","forwardDelay","averageRTT","timestamp","senderRTT","Date","now","WebSocketProtocol","_EventEmitter","_this2","self","call","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","currentPosition","paused","doSeek","isReady","roomdetails","clientIgnoringOnTheFly","serverIgnoringOnTheFly","pingService","serverPosition","subClass","superClass","create","constructor","setPrototypeOf","_inherits","options","_this3","socket","WebSocket","url","addEventListener","password","sendHello","room","sendReady","sendListRequest","currentFile","sendFile","e","emit","messageText","parseMessage","close","send","JSON","stringify","position","setTime","sendState","pause","duration","size","sendData","Set","file","ready","undefined","packet","manuallyInitiated","username","message","parsed","parse","console","Error","parseError","Hello","parseHello","parseSet","List","parseList","State","parseState","Chat","parseChat","serverDetails","version","realversion","features","motd","connectedString","_this4","user","event","joined","left","_this5","messageAge","ignoringOnTheFly","server","stateChanged","playstate","setBy","currentUsername","ping","latencyCalculation","clientLatencyCalculation","receiveMessage","serverRtt","clientIgnoreIsNotSet","output","currentRoom","window"],"mappings":"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","file":"syncweb.min.js","sourcesContent":["(function() {\n\"use strict\";\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* eslint-disable no-unused-vars */\nvar SyncWeb = {};\nSyncWeb.util = {};\n\nvar EventEmitter = function () {\n\tfunction EventEmitter() {\n\t\t_classCallCheck(this, EventEmitter);\n\n\t\tthis.eventList = {};\n\t\tthis.activeEvents = true;\n\t}\n\n\t_createClass(EventEmitter, [{\n\t\tkey: \"on\",\n\t\tvalue: function on(name, callback) {\n\t\t\tif (this.eventList[name] == null) {\n\t\t\t\tthis.eventList[name] = [];\n\t\t\t}\n\t\t\tthis.eventList[name].push(callback);\n\t\t}\n\t}, {\n\t\tkey: \"once\",\n\t\tvalue: function once(name, callback) {\n\t\t\tvar _this = this;\n\n\t\t\tvar modifiedCallback = function modifiedCallback(data) {\n\t\t\t\tcallback(data);\n\t\t\t\t_this.removeListener(name, modifiedCallback);\n\t\t\t};\n\t\t\tthis.on(name, modifiedCallback);\n\t\t}\n\t}, {\n\t\tkey: \"any\",\n\t\tvalue: function any(callback) {\n\t\t\tthis.on(\"*\", callback);\n\t\t}\n\t}, {\n\t\tkey: \"emit\",\n\t\tvalue: function emit(name) {\n\t\t\tif (!this.activeEvents) return 0;\n\n\t\t\tvar totalList = void 0;\n\t\t\tif (this.eventList[name] && this.eventList[\"*\"]) {\n\t\t\t\ttotalList = this.eventList[name].concat(this.eventList[\"*\"]);\n\t\t\t} else if (this.eventList[name]) {\n\t\t\t\ttotalList = this.eventList[name];\n\t\t\t} else if (this.eventList[\"*\"]) {\n\t\t\t\ttotalList = this.eventList[\"*\"];\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tfor (var _len = arguments.length, data = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t\t\t\tdata[_key - 1] = arguments[_key];\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < totalList.length; i++) {\n\t\t\t\tvar _totalList;\n\n\t\t\t\t(_totalList = totalList)[i].apply(_totalList, data);\n\t\t\t}\n\n\t\t\treturn totalList.length;\n\t\t}\n\t}, {\n\t\tkey: \"removeListener\",\n\t\tvalue: function removeListener(name, callback) {\n\t\t\t// TODO: find a way to gracefully report problems like this\n\t\t\tif (!this.eventList[name]) return;\n\n\t\t\tvar index = this.eventList[name].indexOf(callback);\n\t\t\tif (index > -1) this.eventList.splice(index, 1);\n\t\t}\n\t}]);\n\n\treturn EventEmitter;\n}();\n\nSyncWeb.util.EventEmitter = EventEmitter;\n\nvar PingService = function () {\n\tfunction PingService() {\n\t\t_classCallCheck(this, PingService);\n\n\t\tthis.pingMovingAverageWeight = 0.85;\n\t\tthis.roundTripTime = 0;\n\t\tthis.forwardDelay = 0;\n\t\tthis.averageRTT = 0;\n\t}\n\n\t// Directly ported from python implementation\n\n\n\t_createClass(PingService, [{\n\t\tkey: \"receiveMessage\",\n\t\tvalue: function receiveMessage(timestamp, senderRTT) {\n\t\t\tif (!timestamp) return;\n\n\t\t\tthis.roundTripTime = Date.now() / 1000 - timestamp;\n\n\t\t\tif (this.roundTripTime < 0 || senderRTT < 0) return;\n\n\t\t\tif (!this.averageRTT) {\n\t\t\t\tthis.averageRTT = this.roundTripTime;\n\t\t\t}\n\t\t\t// Add to moving average\n\t\t\tthis.averageRTT = this.averageRTT * this.pingMovingAverageWeight + this.roundTripTime * (1 - this.pingMovingAverageWeight);\n\n\t\t\tif (senderRTT < this.roundTripTime) {\n\t\t\t\tthis.forwardDelay = this.averageRTT / 2 + (this.roundTripTime - senderRTT);\n\t\t\t} else {\n\t\t\t\tthis.forwardDelay = this.averageRTT / 2;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"getLastForwardDelay\",\n\t\tvalue: function getLastForwardDelay() {\n\t\t\treturn this.forwardDelay;\n\t\t}\n\t}, {\n\t\tkey: \"getRTT\",\n\t\tvalue: function getRTT() {\n\t\t\treturn this.roundTripTime;\n\t\t}\n\t}]);\n\n\treturn PingService;\n}();\n\nSyncWeb.util.PingService = PingService;\n/* global EventEmitter, PingService */\n\nvar WebSocketProtocol = function (_EventEmitter) {\n\t_inherits(WebSocketProtocol, _EventEmitter);\n\n\tfunction WebSocketProtocol() {\n\t\t_classCallCheck(this, WebSocketProtocol);\n\n\t\tvar _this2 = _possibleConstructorReturn(this, (WebSocketProtocol.__proto__ || Object.getPrototypeOf(WebSocketProtocol)).call(this));\n\n\t\t_this2.currentPosition = 0;\n\t\t_this2.paused = true;\n\t\t_this2.doSeek = false;\n\t\t_this2.isReady = false;\n\t\t_this2.roomdetails = {};\n\t\t_this2.clientIgnoringOnTheFly = 0;\n\t\t_this2.serverIgnoringOnTheFly = 0;\n\t\t_this2.pingService = new PingService();\n\t\t_this2.serverPosition = 0;\n\t\treturn _this2;\n\t}\n\n\t// Public API\n\n\t_createClass(WebSocketProtocol, [{\n\t\tkey: \"connect\",\n\t\tvalue: function connect(options, callback) {\n\t\t\tvar _this3 = this;\n\n\t\t\tthis.socket = new WebSocket(options.url);\n\n\t\t\tthis.socket.addEventListener(\"open\", function () {\n\t\t\t\tcallback();\n\t\t\t\tif (options.password) {\n\t\t\t\t\t_this3.sendHello(options.name, options.room, options.password);\n\t\t\t\t} else {\n\t\t\t\t\t_this3.sendHello(options.name, options.room);\n\t\t\t\t}\n\t\t\t\t_this3.sendReady();\n\t\t\t\t_this3.sendListRequest();\n\t\t\t\tif (_this3.currentFile) {\n\t\t\t\t\t_this3.sendFile();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.socket.addEventListener(\"message\", function (e) {\n\t\t\t\t_this3.emit(\"message\", e.data);\n\t\t\t\te.data.split(\"\\n\").forEach(function (messageText) {\n\t\t\t\t\tif (messageText == null) return;\n\t\t\t\t\tif (messageText.length < 1) return;\n\t\t\t\t\t_this3.parseMessage(messageText);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: \"disconnect\",\n\t\tvalue: function disconnect() {\n\t\t\tif (this.socket) {\n\t\t\t\tthis.socket.close();\n\t\t\t\tdelete this.socket;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"sendData\",\n\t\tvalue: function sendData(data) {\n\t\t\tthis.socket.send(JSON.stringify(data));\n\t\t}\n\t}, {\n\t\tkey: \"setTime\",\n\t\tvalue: function setTime(position) {\n\t\t\tthis.currentPosition = position;\n\t\t}\n\t}, {\n\t\tkey: \"seekTo\",\n\t\tvalue: function seekTo(position) {\n\t\t\tthis.setTime(position);\n\t\t\tthis.doSeek = true;\n\t\t\tthis.sendState();\n\t\t}\n\t}, {\n\t\tkey: \"setPause\",\n\t\tvalue: function setPause(pause) {\n\t\t\tthis.paused = pause;\n\t\t\tif (!pause && !this.isReady) {\n\t\t\t\t// potential problem: unpause is sent from video.play()\n\t\t\t\t// could result in unintentional ready setting\n\t\t\t\tthis.isReady = true;\n\t\t\t\tthis.sendReady();\n\t\t\t}\n\t\t\tthis.sendState();\n\t\t}\n\t}, {\n\t\tkey: \"sendFile\",\n\t\tvalue: function sendFile(duration, name) {\n\t\t\tif (name) {\n\t\t\t\t// TODO size attribute for non-html5 video players?\n\t\t\t\t// 0 means unknown duration\n\t\t\t\tif (!duration) duration = 0;\n\t\t\t\tthis.currentFile = { duration: duration, name: name, size: 0 };\n\t\t\t}\n\t\t\tif (this.currentFile) {\n\t\t\t\tthis.sendData({\n\t\t\t\t\t\"Set\": {\n\t\t\t\t\t\tfile: this.currentFile\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthis.sendListRequest();\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"sendReady\",\n\t\tvalue: function sendReady(ready) {\n\t\t\tif (ready == undefined || ready == null) {\n\t\t\t\tready = this.isReady;\n\t\t\t}\n\t\t\tvar packet = {\n\t\t\t\t\"Set\": {\n\t\t\t\t\t\"ready\": {\n\t\t\t\t\t\tisReady: ready,\n\t\t\t\t\t\tmanuallyInitiated: true,\n\t\t\t\t\t\tusername: this.currentUsername\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.sendData(packet);\n\t\t}\n\n\t\t// Private API\n\n\t}, {\n\t\tkey: \"parseMessage\",\n\t\tvalue: function parseMessage(message) {\n\t\t\tvar parsed = JSON.parse(message);\n\t\t\tconsole.log(\"SERVER:\", parsed); // eslint-disable-line no-console\n\n\t\t\tif (parsed.Error) {\n\t\t\t\tthis.parseError(parsed.Error);\n\t\t\t}\n\t\t\tif (parsed.Hello) {\n\t\t\t\tthis.parseHello(parsed.Hello);\n\t\t\t}\n\t\t\tif (parsed.Set) {\n\t\t\t\tthis.parseSet(parsed.Set);\n\t\t\t}\n\t\t\tif (parsed.List) {\n\t\t\t\tthis.parseList(parsed.List);\n\t\t\t}\n\t\t\tif (parsed.State) {\n\t\t\t\tthis.parseState(parsed.State);\n\t\t\t}\n\t\t\tif (parsed.Chat) {\n\t\t\t\tthis.parseChat(parsed.Chat);\n\t\t\t}\n\n\t\t\tthis.sendState();\n\t\t}\n\t}, {\n\t\tkey: \"parseError\",\n\t\tvalue: function parseError(data) {\n\t\t\tconsole.log(\"err\", data); // eslint-disable-line no-console\n\t\t\t// TODO disconnect\n\t\t}\n\t}, {\n\t\tkey: \"parseHello\",\n\t\tvalue: function parseHello(data) {\n\t\t\tconsole.log(\"hello\", data); // eslint-disable-line no-console\n\t\t\t// TODO handle failed logins, etc.\n\t\t\tthis.serverDetails = {\n\t\t\t\tversion: data.version,\n\t\t\t\trealversion: data.realversion,\n\t\t\t\tfeatures: data.features,\n\t\t\t\tmotd: data.motd\n\t\t\t};\n\t\t\tvar connectedString = \"Connected to server, version \" + data.version + \".\";\n\t\t\tif (data.motd) {\n\t\t\t\tconnectedString += \" MOTD:\\n\\t\\t\\t\" + data.motd;\n\t\t\t}\n\t\t\tthis.emit(\"connected\", connectedString);\n\t\t\t// roomEventRequest?\n\t\t}\n\t}, {\n\t\tkey: \"parseSet\",\n\t\tvalue: function parseSet(data) {\n\t\t\tvar _this4 = this;\n\n\t\t\tconsole.log(\"set\", data); // eslint-disable-line no-console\n\t\t\t// TODO playlists\n\t\t\tif (data.user) {\n\t\t\t\tObject.keys(data.user).forEach(function (key) {\n\t\t\t\t\tvar user = data.user[key];\n\t\t\t\t\tif (user.event) {\n\t\t\t\t\t\tif (user.event.joined) {\n\t\t\t\t\t\t\t_this4.emit(\"joined\", key, user.room.name);\n\t\t\t\t\t\t\t_this4.roomdetails[key] = { room: user.room.name };\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (user.event.left) {\n\t\t\t\t\t\t\t_this4.emit(\"left\", key, user.room.name);\n\t\t\t\t\t\t\tdelete _this4.roomdetails[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (_this4.roomdetails[key] && _this4.roomdetails[key].room != user.room.name) {\n\t\t\t\t\t\t\t// user has moved\n\t\t\t\t\t\t\t_this4.roomdetails[key].room = user.room.name;\n\t\t\t\t\t\t\t_this4.emit(\"moved\", key, user.room.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (user.file) {\n\t\t\t\t\t\t_this4.roomdetails[key].file = user.file;\n\t\t\t\t\t}\n\t\t\t\t\t_this4.emit(\"roomdetails\", _this4.roomdetails);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (data.ready) {\n\t\t\t\tif (!this.roomdetails[data.ready.username]) {\n\t\t\t\t\tthis.roomdetails[data.ready.username] = {};\n\t\t\t\t}\n\t\t\t\tthis.roomdetails[data.ready.username].isReady = data.ready.isReady;\n\t\t\t\tthis.roomdetails[data.ready.username].manuallyInitiated = data.ready.manuallyInitiated;\n\n\t\t\t\tthis.emit(\"roomdetails\", this.roomdetails);\n\t\t\t}\n\n\t\t\t// to implement:\n\t\t\t// room, controllerAuth, newControlledRoom, playlistIndex, playlistChange\n\t\t}\n\t}, {\n\t\tkey: \"parseList\",\n\t\tvalue: function parseList(data) {\n\t\t\tvar _this5 = this;\n\n\t\t\tthis.roomdetails = {};\n\t\t\tObject.keys(data).forEach(function (room) {\n\t\t\t\tObject.keys(data[room]).forEach(function (user) {\n\t\t\t\t\t_this5.roomdetails[user] = data[room][user];\n\t\t\t\t\t_this5.roomdetails[user].room = room;\n\t\t\t\t});\n\t\t\t});\n\t\t\tthis.emit(\"roomdetails\", data);\n\t\t}\n\t}, {\n\t\tkey: \"parseState\",\n\t\tvalue: function parseState(data) {\n\t\t\tvar messageAge = 0;\n\t\t\tif (data.ignoringOnTheFly && data.ignoringOnTheFly.server) {\n\t\t\t\tthis.serverIgnoringOnTheFly = data.ignoringOnTheFly.server;\n\t\t\t\tthis.clientIgnoringOnTheFly = 0;\n\t\t\t\tthis.stateChanged = false;\n\t\t\t}\n\t\t\tif (data.playstate) {\n\t\t\t\tif (data.playstate.setBy && data.playstate.setBy != this.currentUsername) {\n\t\t\t\t\tif (data.playstate.doSeek && !this.doSeek) {\n\t\t\t\t\t\tthis.emit(\"seek\", data.playstate.position, data.playstate.setBy);\n\t\t\t\t\t}\n\t\t\t\t\tif (this.paused != data.playstate.paused) {\n\t\t\t\t\t\tif (data.playstate.paused) {\n\t\t\t\t\t\t\tthis.emit(\"pause\", data.playstate.setBy);\n\t\t\t\t\t\t\tthis.paused = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.emit(\"unpause\", data.playstate.setBy);\n\t\t\t\t\t\t\tthis.paused = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (data.playstate.position) {\n\t\t\t\t\tthis.serverPosition = data.playstate.position;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (data.ping) {\n\t\t\t\tif (data.ping.latencyCalculation) {\n\t\t\t\t\tthis.latencyCalculation = data.ping.latencyCalculation;\n\t\t\t\t}\n\t\t\t\tif (data.ping.clientLatencyCalculation) {\n\t\t\t\t\tthis.pingService.receiveMessage(data.ping.clientLatencyCalculation, data.ping.serverRtt);\n\t\t\t\t}\n\t\t\t\tmessageAge = this.pingService.getLastForwardDelay();\n\t\t\t}\n\n\t\t\t// update position due to message delays\n\t\t\tif (!this.paused) {\n\t\t\t\tthis.serverPosition += messageAge;\n\t\t\t}\n\n\t\t\t// compare server position and client position, ffwd/rewind etc.\n\t\t}\n\t}, {\n\t\tkey: \"parseChat\",\n\t\tvalue: function parseChat(data) {\n\t\t\tthis.emit(\"chat\", data.username, data.message);\n\t\t}\n\t}, {\n\t\tkey: \"sendState\",\n\t\tvalue: function sendState() {\n\t\t\tvar clientIgnoreIsNotSet = this.clientIgnoringOnTheFly == 0 || this.serverIgnoringOnTheFly != 0;\n\t\t\tvar output = {};\n\t\t\toutput.State = {};\n\n\t\t\tif (clientIgnoreIsNotSet) {\n\t\t\t\toutput.State.playstate = {};\n\t\t\t\toutput.State.playstate.position = this.currentPosition;\n\t\t\t\toutput.State.playstate.paused = this.paused;\n\t\t\t\tif (this.doSeek) {\n\t\t\t\t\toutput.State.playstate.doSeek = true;\n\t\t\t\t\tthis.doSeek = false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toutput.State.ping = {};\n\t\t\tif (this.latencyCalculation) {\n\t\t\t\toutput.State.ping.latencyCalculation = this.latencyCalculation;\n\t\t\t}\n\t\t\toutput.State.ping.clientLatencyCalculation = Date.now() / 1000;\n\t\t\toutput.State.ping.clientRtt = this.pingService.getRTT();\n\n\t\t\tif (this.stateChanged) {\n\t\t\t\t// TODO update this properly\n\t\t\t\tthis.clientIgnoringOnTheFly += 1;\n\t\t\t}\n\n\t\t\tif (this.serverIgnoringOnTheFly > 0 || this.clientIgnoringOnTheFly > 0) {\n\t\t\t\toutput.State.ignoringOnTheFly = {};\n\t\t\t\tif (this.serverIgnoringOnTheFly > 0) {\n\t\t\t\t\toutput.State.ignoringOnTheFly.server = this.serverIgnoringOnTheFly;\n\t\t\t\t\tthis.serverIgnoringOnTheFly = 0;\n\t\t\t\t}\n\t\t\t\tif (this.clientIgnoringOnTheFly > 0) {\n\t\t\t\t\toutput.State.ignoringOnTheFly.client = this.clientIgnoringOnTheFly;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconsole.log(output); // eslint-disable-line no-console\n\n\t\t\tthis.sendData(output);\n\t\t}\n\t}, {\n\t\tkey: \"sendHello\",\n\t\tvalue: function sendHello(username, room, password) {\n\t\t\tthis.currentUsername = username;\n\t\t\tthis.currentRoom = room;\n\n\t\t\tvar packet = {\n\t\t\t\t\"Hello\": {\n\t\t\t\t\tusername: username,\n\t\t\t\t\t\"room\": {\n\t\t\t\t\t\tname: room\n\t\t\t\t\t},\n\t\t\t\t\t\"version\": \"1.5.1\"\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (password) {\n\t\t\t\tpacket.Hello.password = password;\n\t\t\t}\n\n\t\t\tthis.sendData(packet);\n\t\t}\n\t}, {\n\t\tkey: \"sendListRequest\",\n\t\tvalue: function sendListRequest() {\n\t\t\tthis.sendData({ \"List\": null });\n\t\t}\n\t}]);\n\n\treturn WebSocketProtocol;\n}(EventEmitter);\n\nSyncWeb.Client = WebSocketProtocol;\nwindow.SyncWeb = SyncWeb;\n}());\n","/* eslint-disable no-unused-vars */\r\nlet SyncWeb = {};\r\nSyncWeb.util = {};","class EventEmitter {\r\n\tconstructor() {\r\n\t\tthis.eventList = {};\r\n\t\tthis.activeEvents = true;\r\n\t}\r\n\r\n\ton(name, callback) {\r\n\t\tif (this.eventList[name] == null) {\r\n\t\t\tthis.eventList[name] = [];\r\n\t\t}\r\n\t\tthis.eventList[name].push(callback);\r\n\t}\r\n\r\n\tonce(name, callback) {\r\n\t\tlet modifiedCallback = (data) => {\r\n\t\t\tcallback(data);\r\n\t\t\tthis.removeListener(name, modifiedCallback);\r\n\t\t};\r\n\t\tthis.on(name, modifiedCallback);\r\n\t}\r\n\r\n\tany(callback) {\r\n\t\tthis.on(\"*\", callback);\r\n\t}\r\n\r\n\temit(name, ...data) {\r\n\t\tif (!this.activeEvents) return 0;\r\n\r\n\t\tlet totalList;\r\n\t\tif (this.eventList[name] && this.eventList[\"*\"]) {\r\n\t\t\ttotalList = this.eventList[name].concat(this.eventList[\"*\"]);\r\n\t\t} else if (this.eventList[name]) {\r\n\t\t\ttotalList = this.eventList[name];\r\n\t\t} else if (this.eventList[\"*\"]) {\r\n\t\t\ttotalList = this.eventList[\"*\"]\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < totalList.length; i++) {\r\n\t\t\ttotalList[i](...data);\r\n\t\t}\r\n\r\n\t\treturn totalList.length;\r\n\t}\r\n\r\n\tremoveListener(name, callback) {\r\n\t\t// TODO: find a way to gracefully report problems like this\r\n\t\tif (!this.eventList[name]) return;\r\n\r\n\t\tlet index = this.eventList[name].indexOf(callback);\r\n\t\tif (index > -1) this.eventList.splice(index, 1);\r\n\t}\r\n}\r\n\r\nSyncWeb.util.EventEmitter = EventEmitter;","class PingService {\r\n\tconstructor() {\r\n\t\tthis.pingMovingAverageWeight = 0.85;\r\n\t\tthis.roundTripTime = 0;\r\n\t\tthis.forwardDelay = 0;\r\n\t\tthis.averageRTT = 0;\r\n\t}\r\n\r\n\t// Directly ported from python implementation\r\n\treceiveMessage(timestamp, senderRTT) {\r\n\t\tif (!timestamp) return;\r\n\r\n\t\tthis.roundTripTime = (Date.now() / 1000) - timestamp;\r\n\r\n\t\tif (this.roundTripTime < 0 || senderRTT < 0) return;\r\n\r\n\t\tif (!this.averageRTT) {\r\n\t\t\tthis.averageRTT = this.roundTripTime;\r\n\t\t}\r\n\t\t// Add to moving average\r\n\t\tthis.averageRTT = (this.averageRTT * this.pingMovingAverageWeight) + (this.roundTripTime * (1 - this.pingMovingAverageWeight));\r\n\r\n\t\tif (senderRTT < this.roundTripTime) {\r\n\t\t\tthis.forwardDelay = (this.averageRTT / 2) + (this.roundTripTime - senderRTT);\r\n\t\t} else {\r\n\t\t\tthis.forwardDelay = this.averageRTT / 2;\r\n\t\t}\r\n\t}\r\n\r\n\tgetLastForwardDelay() {\r\n\t\treturn this.forwardDelay;\r\n\t}\r\n\r\n\tgetRTT() {\r\n\t\treturn this.roundTripTime;\r\n\t}\r\n}\r\n\r\nSyncWeb.util.PingService = PingService;","/* global EventEmitter, PingService */\r\n\r\nclass WebSocketProtocol extends EventEmitter {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.currentPosition = 0;\r\n\t\tthis.paused = true;\r\n\t\tthis.doSeek = false;\r\n\t\tthis.isReady = false;\r\n\t\tthis.roomdetails = {};\r\n\t\tthis.clientIgnoringOnTheFly = 0;\r\n\t\tthis.serverIgnoringOnTheFly = 0;\r\n\t\tthis.pingService = new PingService();\r\n\t\tthis.serverPosition = 0;\r\n\t}\r\n\r\n\t// Public API\r\n\r\n\tconnect(options, callback) {\r\n\t\tthis.socket = new WebSocket(options.url);\r\n\r\n\t\tthis.socket.addEventListener(\"open\", () => {\r\n\t\t\tcallback();\r\n\t\t\tif (options.password) {\r\n\t\t\t\tthis.sendHello(options.name, options.room, options.password);\r\n\t\t\t} else {\r\n\t\t\t\tthis.sendHello(options.name, options.room);\r\n\t\t\t}\r\n\t\t\tthis.sendReady();\r\n\t\t\tthis.sendListRequest();\r\n\t\t\tif (this.currentFile) {\r\n\t\t\t\tthis.sendFile();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.socket.addEventListener(\"message\", (e) => {\r\n\t\t\tthis.emit(\"message\", e.data);\r\n\t\t\te.data.split(\"\\n\").forEach(messageText => {\r\n\t\t\t\tif (messageText == null) return;\r\n\t\t\t\tif (messageText.length < 1) return;\r\n\t\t\t\tthis.parseMessage(messageText);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tdisconnect() {\r\n\t\tif (this.socket) {\r\n\t\t\tthis.socket.close();\r\n\t\t\tdelete this.socket;\r\n\t\t}\r\n\t}\r\n\r\n\tsendData(data) {\r\n\t\tthis.socket.send(JSON.stringify(data));\r\n\t}\r\n\r\n\tsetTime(position) {\r\n\t\tthis.currentPosition = position;\r\n\t}\r\n\r\n\tseekTo(position) {\r\n\t\tthis.setTime(position);\r\n\t\tthis.doSeek = true;\r\n\t\tthis.sendState();\r\n\t}\r\n\r\n\tsetPause(pause) {\r\n\t\tthis.paused = pause;\r\n\t\tif (!pause && !this.isReady) {\r\n\t\t\t// potential problem: unpause is sent from video.play()\r\n\t\t\t// could result in unintentional ready setting\r\n\t\t\tthis.isReady = true;\r\n\t\t\tthis.sendReady();\r\n\t\t}\r\n\t\tthis.sendState();\r\n\t}\r\n\r\n\tsendFile(duration, name) {\r\n\t\tif (name) {\r\n\t\t\t// TODO size attribute for non-html5 video players?\r\n\t\t\t// 0 means unknown duration\r\n\t\t\tif (!duration) duration = 0;\r\n\t\t\tthis.currentFile = {duration, name, size: 0};\r\n\t\t}\r\n\t\tif (this.currentFile) {\r\n\t\t\tthis.sendData({\r\n\t\t\t\t\"Set\": {\r\n\t\t\t\t\tfile: this.currentFile\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis.sendListRequest();\r\n\t\t}\r\n\t}\r\n\r\n\tsendReady(ready) {\r\n\t\tif (ready == undefined || ready == null) {\r\n\t\t\tready = this.isReady;\r\n\t\t}\r\n\t\tlet packet = {\r\n\t\t\t\"Set\": {\r\n\t\t\t\t\"ready\": {\r\n\t\t\t\t\tisReady: ready,\r\n\t\t\t\t\tmanuallyInitiated: true,\r\n\t\t\t\t\tusername: this.currentUsername\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.sendData(packet);\r\n\t}\r\n\r\n\t// Private API\r\n\r\n\tparseMessage(message) {\r\n\t\tlet parsed = JSON.parse(message);\r\n\t\tconsole.log(\"SERVER:\", parsed); // eslint-disable-line no-console\r\n\r\n\t\tif (parsed.Error) {\r\n\t\t\tthis.parseError(parsed.Error);\r\n\t\t}\r\n\t\tif (parsed.Hello) {\r\n\t\t\tthis.parseHello(parsed.Hello);\r\n\t\t}\r\n\t\tif (parsed.Set) {\r\n\t\t\tthis.parseSet(parsed.Set);\r\n\t\t}\r\n\t\tif (parsed.List) {\r\n\t\t\tthis.parseList(parsed.List);\r\n\t\t}\r\n\t\tif (parsed.State) {\r\n\t\t\tthis.parseState(parsed.State);\r\n\t\t}\r\n\t\tif (parsed.Chat) {\r\n\t\t\tthis.parseChat(parsed.Chat);\r\n\t\t}\r\n\r\n\t\tthis.sendState();\r\n\t}\r\n\r\n\tparseError(data) {\r\n\t\tconsole.log(\"err\", data); // eslint-disable-line no-console\r\n\t\t// TODO disconnect\r\n\t}\r\n\r\n\tparseHello(data) {\r\n\t\tconsole.log(\"hello\", data); // eslint-disable-line no-console\r\n\t\t// TODO handle failed logins, etc.\r\n\t\tthis.serverDetails = {\r\n\t\t\tversion: data.version,\r\n\t\t\trealversion: data.realversion,\r\n\t\t\tfeatures: data.features,\r\n\t\t\tmotd: data.motd\r\n\t\t};\r\n\t\tlet connectedString = `Connected to server, version ${data.version}.`;\r\n\t\tif (data.motd) {\r\n\t\t\tconnectedString += ` MOTD:\r\n\t\t\t${data.motd}`;\r\n\t\t}\r\n\t\tthis.emit(\"connected\", connectedString);\r\n\t\t// roomEventRequest?\r\n\t}\r\n\r\n\tparseSet(data) {\r\n\t\tconsole.log(\"set\", data); // eslint-disable-line no-console\r\n\t\t// TODO playlists\r\n\t\tif (data.user) {\r\n\t\t\tObject.keys(data.user).forEach((key) => {\r\n\t\t\t\tlet user = data.user[key];\r\n\t\t\t\tif (user.event) {\r\n\t\t\t\t\tif (user.event.joined) {\r\n\t\t\t\t\t\tthis.emit(\"joined\", key, user.room.name);\r\n\t\t\t\t\t\tthis.roomdetails[key] = {room: user.room.name};\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (user.event.left) {\r\n\t\t\t\t\t\tthis.emit(\"left\", key, user.room.name);\r\n\t\t\t\t\t\tdelete this.roomdetails[key];\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (this.roomdetails[key] && this.roomdetails[key].room != user.room.name) {\r\n\t\t\t\t\t\t// user has moved\r\n\t\t\t\t\t\tthis.roomdetails[key].room = user.room.name;\r\n\t\t\t\t\t\tthis.emit(\"moved\", key, user.room.name);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (user.file) {\r\n\t\t\t\t\tthis.roomdetails[key].file = user.file;\r\n\t\t\t\t}\r\n\t\t\t\tthis.emit(\"roomdetails\", this.roomdetails);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (data.ready) {\r\n\t\t\tif (!this.roomdetails[data.ready.username]) {\r\n\t\t\t\tthis.roomdetails[data.ready.username] = {};\r\n\t\t\t} \r\n\t\t\tthis.roomdetails[data.ready.username].isReady = data.ready.isReady;\r\n\t\t\tthis.roomdetails[data.ready.username].manuallyInitiated = data.ready.manuallyInitiated;\r\n\r\n\t\t\tthis.emit(\"roomdetails\", this.roomdetails);\r\n\t\t}\r\n\r\n\t\t// to implement:\r\n\t\t// room, controllerAuth, newControlledRoom, playlistIndex, playlistChange\r\n\t}\r\n\r\n\tparseList(data) {\r\n\t\tthis.roomdetails = {};\r\n\t\tObject.keys(data).forEach((room) => {\r\n\t\t\tObject.keys(data[room]).forEach((user) => {\r\n\t\t\t\tthis.roomdetails[user] = data[room][user];\r\n\t\t\t\tthis.roomdetails[user].room = room;\r\n\t\t\t});\r\n\t\t});\r\n\t\tthis.emit(\"roomdetails\", data);\r\n\t}\r\n\r\n\tparseState(data) {\r\n\t\tlet messageAge = 0;\r\n\t\tif (data.ignoringOnTheFly && data.ignoringOnTheFly.server) {\r\n\t\t\tthis.serverIgnoringOnTheFly = data.ignoringOnTheFly.server;\r\n\t\t\tthis.clientIgnoringOnTheFly = 0;\r\n\t\t\tthis.stateChanged = false;\r\n\t\t}\r\n\t\tif (data.playstate) {\r\n\t\t\tif (data.playstate.setBy && data.playstate.setBy != this.currentUsername) {\r\n\t\t\t\tif (data.playstate.doSeek && !this.doSeek) {\r\n\t\t\t\t\tthis.emit(\"seek\", data.playstate.position, data.playstate.setBy);\r\n\t\t\t\t}\r\n\t\t\t\tif (this.paused != data.playstate.paused) {\r\n\t\t\t\t\tif (data.playstate.paused) {\r\n\t\t\t\t\t\tthis.emit(\"pause\", data.playstate.setBy);\r\n\t\t\t\t\t\tthis.paused = true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.emit(\"unpause\", data.playstate.setBy);\r\n\t\t\t\t\t\tthis.paused = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (data.playstate.position) {\r\n\t\t\t\tthis.serverPosition = data.playstate.position;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (data.ping) {\r\n\t\t\tif (data.ping.latencyCalculation) {\r\n\t\t\t\tthis.latencyCalculation = data.ping.latencyCalculation;\r\n\t\t\t}\r\n\t\t\tif (data.ping.clientLatencyCalculation) {\r\n\t\t\t\tthis.pingService.receiveMessage(data.ping.clientLatencyCalculation, data.ping.serverRtt);\r\n\t\t\t}\r\n\t\t\tmessageAge = this.pingService.getLastForwardDelay();\r\n\t\t}\r\n\r\n\t\t// update position due to message delays\r\n\t\tif (!this.paused) {\r\n\t\t\tthis.serverPosition += messageAge;\r\n\t\t}\r\n\r\n\t\t// compare server position and client position, ffwd/rewind etc.\r\n\t}\r\n\r\n\tparseChat(data) {\r\n\t\tthis.emit(\"chat\", data.username, data.message);\r\n\t}\r\n\r\n\tsendState() {\r\n\t\tlet clientIgnoreIsNotSet = (this.clientIgnoringOnTheFly == 0 || this.serverIgnoringOnTheFly != 0);\r\n\t\tlet output = {};\r\n\t\toutput.State = {};\r\n\r\n\t\tif (clientIgnoreIsNotSet) {\r\n\t\t\toutput.State.playstate = {};\r\n\t\t\toutput.State.playstate.position = this.currentPosition;\r\n\t\t\toutput.State.playstate.paused = this.paused;\r\n\t\t\tif (this.doSeek) {\r\n\t\t\t\toutput.State.playstate.doSeek = true;\r\n\t\t\t\tthis.doSeek = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\toutput.State.ping = {};\r\n\t\tif (this.latencyCalculation) {\r\n\t\t\toutput.State.ping.latencyCalculation = this.latencyCalculation;\r\n\t\t}\r\n\t\toutput.State.ping.clientLatencyCalculation = Date.now() / 1000;\r\n\t\toutput.State.ping.clientRtt = this.pingService.getRTT();\r\n\r\n\t\tif (this.stateChanged) { // TODO update this properly\r\n\t\t\tthis.clientIgnoringOnTheFly += 1;\r\n\t\t}\r\n\r\n\t\tif (this.serverIgnoringOnTheFly > 0 || this.clientIgnoringOnTheFly > 0) {\r\n\t\t\toutput.State.ignoringOnTheFly = {};\r\n\t\t\tif (this.serverIgnoringOnTheFly > 0) {\r\n\t\t\t\toutput.State.ignoringOnTheFly.server = this.serverIgnoringOnTheFly;\r\n\t\t\t\tthis.serverIgnoringOnTheFly = 0;\r\n\t\t\t}\r\n\t\t\tif (this.clientIgnoringOnTheFly > 0) {\r\n\t\t\t\toutput.State.ignoringOnTheFly.client = this.clientIgnoringOnTheFly;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconsole.log(output); // eslint-disable-line no-console\r\n\r\n\t\tthis.sendData(output);\r\n\t}\r\n\r\n\tsendHello(username, room, password) {\r\n\t\tthis.currentUsername = username;\r\n\t\tthis.currentRoom = room;\r\n\r\n\t\tlet packet = {\r\n\t\t\t\"Hello\": {\r\n\t\t\t\tusername,\r\n\t\t\t\t\"room\": {\r\n\t\t\t\t\tname: room\r\n\t\t\t\t},\r\n\t\t\t\t\"version\": \"1.5.1\"\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tif (password) {\r\n\t\t\tpacket.Hello.password = password;\r\n\t\t}\r\n\r\n\t\tthis.sendData(packet);\r\n\t}\r\n\r\n\tsendListRequest() {\r\n\t\tthis.sendData({\"List\": null});\r\n\t}\r\n}\r\n\r\nSyncWeb.Client = WebSocketProtocol;","window.SyncWeb = SyncWeb;"]}